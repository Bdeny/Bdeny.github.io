<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YobeZhou</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="YobeZhou.github.io/"/>
  <updated>2019-04-06T16:23:03.256Z</updated>
  <id>YobeZhou.github.io/</id>
  
  <author>
    <name>周岳标</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python多进程解决TensorFlow中的OpenCV视频流读取延迟问题</title>
    <link href="YobeZhou.github.io/2019/04/06/Python%E5%A4%9A%E8%BF%9B%E7%A8%8B%E8%A7%A3%E5%86%B3TensorFlow%E4%B8%AD%E7%9A%84OpenCV%E8%A7%86%E9%A2%91%E6%B5%81%E8%AF%BB%E5%8F%96%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98/"/>
    <id>YobeZhou.github.io/2019/04/06/Python多进程解决TensorFlow中的OpenCV视频流读取延迟问题/</id>
    <published>2019-04-06T15:25:45.000Z</published>
    <updated>2019-04-06T16:23:03.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用TensorFlow做物体分类识别时，发现其调用的读取视频帧的 read() 函数时发现其数据处理与数据产生的速度跟不上而导致延迟非常高，甚至内存溢出，因此开始思考解决措施。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">retval, image = cv.VideoCapture.read([, image])</span><br></pre></td></tr></table></figure></p><p>这是因为OpenCV读取视频流时，数据处理程序需要消耗的CPU时间过于长（不同硬件配置情况不可一概而论），而VideoCapture的read是按帧队列读取，先进先出，所以出现了上面所说的问题。<br>由此联想到我们需要将读取视频数据和处理视频数据的过程分开处理，从而试图消除延迟。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>我们可以使用多进程或多线程将读取视频数据和处理视频数据的过程分开处理，但是由于实时视频处理术语CPU密集型任务，多线程的优势发挥不出来，因此我们选择多进程方式。</p><h2 id="所用到的库"><a href="#所用到的库" class="headerlink" title="所用到的库"></a>所用到的库</h2><p>实现多进程所用到的库：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br></pre></td></tr></table></figure></p><p>两个子进程：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">write()</span><br><span class="line">read()</span><br></pre></td></tr></table></figure></p><h2 id="在两个子进程中传递参数"><a href="#在两个子进程中传递参数" class="headerlink" title="在两个子进程中传递参数"></a>在两个子进程中传递参数</h2><ul><li>multiprocessing中有Quaue、SimpleQuaue等进程间传参类，以及Manager统领全局。</li><li>使用Manager我们可以在进程键传递字典、列表灯Python原生数据类型</li><li>Quaue时严格的数据结构队列类型</li></ul><h2 id="在读取进程中得到最新的视频帧数据"><a href="#在读取进程中得到最新的视频帧数据" class="headerlink" title="在读取进程中得到最新的视频帧数据"></a>在读取进程中得到最新的视频帧数据</h2><ul><li>首先 VideoCapture 是队列，先进先出。因此我们需要将其转换为压栈存储视频帧数据，才能达到后进先出而获取最新的视频帧数据，因此不能使用Quaue来传递参数。</li><li>为了达到压栈的效果，我们可以使用Python的列表，其append与pop操作可以达到模拟压栈的效果。因此，我们可以使用 multiprocessing.Manager.list 进行进程间传参类型最为理想不过。</li></ul><h2 id="清理传参栈"><a href="#清理传参栈" class="headerlink" title="清理传参栈"></a>清理传参栈</h2><p>由于压栈频率肯定是要比出栈频率高的，时间一长就会在栈中积累大量无法出栈的视频帧，会导致程序崩溃，因此我们需要考虑传参栈自动清理的问题，我们需要一个自动清理的机制：</p><ul><li>我们可以设定传参栈的容量，每当达到这个容量时就直接把栈清空，再利用gc库手动发起一次python垃圾回收，这样就不会导致严重的内存溢出和程序崩溃。</li></ul><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><p>综上所述，实际上这个程序就是把VideoCapture的队列读取改成了栈读取。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># Import packages</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import utilites</span></span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> label_map_util</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> visualization_utils <span class="keyword">as</span> vis_util</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向共享缓冲栈中写入数据:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(stack, cam, top: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param cam: 摄像头参数</span></span><br><span class="line"><span class="string">    :param stack: Manager.list对象</span></span><br><span class="line"><span class="string">    :param top: 缓冲栈容量</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'Process to write: %s'</span> % os.getpid())</span><br><span class="line"></span><br><span class="line">    video = cv2.VideoCapture(cam)</span><br><span class="line">    <span class="comment"># 可以通过该地址查看属性设置的帮助官方文档： </span></span><br><span class="line">    <span class="comment"># https://docs.opencv.org/master/d4/d15/group__videoio__flags__base.html#gaeb8dd9c89c10a5c63c139bf7c4f5704d</span></span><br><span class="line">    ret = video.set(<span class="number">3</span>,<span class="number">640</span>)</span><br><span class="line">    ret = video.set(<span class="number">4</span>,<span class="number">480</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 利用 'cv.VideoCapture.get(propId)' 查询指定属性的值。查询VideoCapture实例使用的后端不支持的属性时返回值0 。</span></span><br><span class="line">    <span class="comment"># 5 -- 查看当前帧速率</span></span><br><span class="line">    retval = video.get(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (cam)</span><br><span class="line">    print(retval)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(video.isOpened()):</span><br><span class="line">        ret, img = video.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            stack.append(img)</span><br><span class="line">            <span class="comment"># 每到一定容量清空一次缓冲栈</span></span><br><span class="line">            <span class="comment"># 利用gc库，手动清理内存垃圾，防止内存溢出</span></span><br><span class="line">            <span class="keyword">if</span> len(stack) &gt;= top:</span><br><span class="line">                <span class="keyword">del</span> stack[:]</span><br><span class="line">                gc.collect()</span><br><span class="line">        <span class="comment"># Press 'q' to quit</span></span><br><span class="line">            <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># Clean up</span></span><br><span class="line">    video.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在缓冲栈中读取数据:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(stack)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Process to read: %s'</span> % os.getpid())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Name of the directory containing the object detection module we're using</span></span><br><span class="line">    MODEL_NAME = <span class="string">'inference_graph'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Grab path to current working directory</span></span><br><span class="line">    CWD_PATH = os.getcwd()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Path to frozen detection graph .pb file, which contains the model that is used</span></span><br><span class="line">    <span class="comment"># for object detection.</span></span><br><span class="line">    PATH_TO_CKPT = os.path.join(CWD_PATH,MODEL_NAME,<span class="string">'frozen_inference_graph.pb'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Path to label map file</span></span><br><span class="line">    PATH_TO_LABELS = os.path.join(CWD_PATH,<span class="string">'training'</span>,<span class="string">'labelmap.pbtxt'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Number of classes the object detector can identify</span></span><br><span class="line">    NUM_CLASSES = <span class="number">56</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## Load the label map.</span></span><br><span class="line">    <span class="comment"># Label maps map indices to category names, so that when our convolution</span></span><br><span class="line">    <span class="comment"># network predicts `5`, we know that this corresponds to `king`.</span></span><br><span class="line">    <span class="comment"># Here we use internal utility functions, but anything that returns a</span></span><br><span class="line">    <span class="comment"># dictionary mapping integers to appropriate string labels would be fine</span></span><br><span class="line">    label_map = label_map_util.load_labelmap(PATH_TO_LABELS)</span><br><span class="line">    categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=<span class="literal">True</span>)</span><br><span class="line">    category_index = label_map_util.create_category_index(categories)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load the Tensorflow model into memory.</span></span><br><span class="line">    detection_graph = tf.Graph()</span><br><span class="line">    <span class="keyword">with</span> detection_graph.as_default():</span><br><span class="line">        od_graph_def = tf.GraphDef()</span><br><span class="line">        <span class="keyword">with</span> tf.gfile.GFile(PATH_TO_CKPT, <span class="string">'rb'</span>) <span class="keyword">as</span> fid:</span><br><span class="line">            serialized_graph = fid.read()</span><br><span class="line">            od_graph_def.ParseFromString(serialized_graph)</span><br><span class="line">            tf.import_graph_def(od_graph_def, name=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        sess = tf.Session(graph=detection_graph)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define input and output tensors (i.e. data) for the object detection classifier</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Input tensor is the image</span></span><br><span class="line">    image_tensor = detection_graph.get_tensor_by_name(<span class="string">'image_tensor:0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Output tensors are the detection boxes, scores, and classes</span></span><br><span class="line">    <span class="comment"># Each box represents a part of the image where a particular object was detected</span></span><br><span class="line">    detection_boxes = detection_graph.get_tensor_by_name(<span class="string">'detection_boxes:0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Each score represents level of confidence for each of the objects.</span></span><br><span class="line">    <span class="comment"># The score is shown on the result image, together with the class label.</span></span><br><span class="line">    detection_scores = detection_graph.get_tensor_by_name(<span class="string">'detection_scores:0'</span>)</span><br><span class="line">    detection_classes = detection_graph.get_tensor_by_name(<span class="string">'detection_classes:0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Number of objects detected</span></span><br><span class="line">    num_detections = detection_graph.get_tensor_by_name(<span class="string">'num_detections:0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">if</span> len(stack) != <span class="number">0</span>: </span><br><span class="line">            <span class="comment"># Acquire frame and expand frame dimensions to have shape: [1, None, None, 3]</span></span><br><span class="line">            <span class="comment"># i.e. a single-column array, where each item in the column has the pixel RGB value</span></span><br><span class="line">            frame = stack.pop()</span><br><span class="line"></span><br><span class="line">            frame_expanded = np.expand_dims(frame, axis=<span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Perform the actual detection by running the model with the image as input</span></span><br><span class="line">            (boxes, scores, classes, num) = sess.run(</span><br><span class="line">                [detection_boxes, detection_scores, detection_classes, num_detections],</span><br><span class="line">                feed_dict=&#123;image_tensor: frame_expanded&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Draw the results of the detection (aka 'visulaize the results') </span></span><br><span class="line">            <span class="comment"># visualize boxes and labels on image array</span></span><br><span class="line">            image,tablename = vis_util.my_visualize_boxes_and_labels_on_image_array(</span><br><span class="line">                frame,</span><br><span class="line">                np.squeeze(boxes),</span><br><span class="line">                np.squeeze(classes).astype(np.int32),</span><br><span class="line">                np.squeeze(scores),</span><br><span class="line">                category_index,</span><br><span class="line">                use_normalized_coordinates=<span class="literal">True</span>,</span><br><span class="line">                line_thickness=<span class="number">8</span>,</span><br><span class="line">                min_score_thresh=<span class="number">0.60</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># All the results have been drawn on the frame, so it's time to display it.</span></span><br><span class="line">            cv2.imshow(<span class="string">'Object detector'</span>, frame)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在控制台上打印识别结果</span></span><br><span class="line">            <span class="keyword">print</span> (tablename)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Press 'q' to quit</span></span><br><span class="line">            <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    </span><br><span class="line">    print(tf.__version__)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This is needed since the notebook is stored in the object_detection folder.</span></span><br><span class="line">    sys.path.append(<span class="string">".."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize webcam feed</span></span><br><span class="line">    url = <span class="string">'http://192.168.0.125:8081/'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 父进程创建缓冲栈，并传给各个子进程：</span></span><br><span class="line">    q = Manager().list()</span><br><span class="line">    pw = Process(target=write, args=(q, url, <span class="number">50</span>))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动子进程</span></span><br><span class="line">    pw.start()</span><br><span class="line">    pr.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待子进程结束</span></span><br><span class="line">    pw.join()</span><br><span class="line">    pr.join()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用TensorFlow做物体分类识别时，发现其调用的读取视频帧的 read() 函数时发现其数据处理与数据产生的速度跟不上而导致延迟非常
      
    
    </summary>
    
      <category term="TensorFlow" scheme="YobeZhou.github.io/categories/TensorFlow/"/>
    
    
      <category term="Python" scheme="YobeZhou.github.io/tags/Python/"/>
    
      <category term="TensorFlow" scheme="YobeZhou.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Qt串口读取连贯数据</title>
    <link href="YobeZhou.github.io/2019/04/05/Qt%E4%B8%B2%E5%8F%A3%E8%AF%BB%E5%8F%96%E8%BF%9E%E8%B4%AF%E6%95%B0%E6%8D%AE/"/>
    <id>YobeZhou.github.io/2019/04/05/Qt串口读取连贯数据/</id>
    <published>2019-04-05T00:45:58.000Z</published>
    <updated>2019-04-05T01:00:06.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Qt的“信号与槽”机制极大的便利了内部事件的处理，但是在接收串口数据时我们利用到Qt的这一机制，却发现接收到的数据往往是不连贯的，这是由于当有数据到来时便立即触发读取操作，串口数据发送亦然，借此我们的程序能够及时处理串口中的数据。然而由于串口传输速率以及延迟问题，此时如果没有对接收到的串口数据做缓冲处理，最终导致我们接收到的数据呈现出来的将是断断续续的状态。<br>因此下面的笔记为Qt中加了缓冲区的串口读取操作。</p><h2 id="串口缓冲区读取操作"><a href="#串口缓冲区读取操作" class="headerlink" title="串口缓冲区读取操作"></a>串口缓冲区读取操作</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建静态全局变量，用以串口读取缓冲区 */</span></span><br><span class="line">static QByreArry s_serialDataBuf;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*！</span></span><br><span class="line"><span class="comment">  * \rief Qt串口数据读取</span></span><br><span class="line"><span class="comment">  * \param 无输入参数</span></span><br><span class="line"><span class="comment">  * \return 无返回值</span></span><br><span class="line"><span class="comment">  * \attention 仅作参考</span></span><br><span class="line"><span class="comment">  * \author Yobe Zhou</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="attribute">MainWindow</span>::readSerialData()</span><br><span class="line">&#123;</span><br><span class="line">    QString readData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取串口数据，当串口有数据到来时马上读取 */</span></span><br><span class="line">    <span class="keyword">const</span> QByreArry bufferData = m_serial-&gt;readAll();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将读取到数据追加到缓冲区 */</span></span><br><span class="line">    s_serialDataBuf.append(bufferData);</span><br><span class="line">    <span class="comment">/* 追加数据直到缓冲区有至少一条目标语句 */</span></span><br><span class="line">    <span class="keyword">if</span> (s_serialBuffer.contains(<span class="string">'B'</span>)) &amp;&amp; (s_serialDataBuf.contains(<span class="string">'\n'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        QString tempString;</span><br><span class="line">        QList&lt;QByteArry&gt; lineList;</span><br><span class="line">        <span class="built_in">int</span> listCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        tempString = s_serialDataBuf;</span><br><span class="line">        <span class="comment">/* 根据字头标识分割各条语句 */</span></span><br><span class="line">        lineList = s_serialDataBuf.split(<span class="string">'B'</span>);</span><br><span class="line">        <span class="comment">/* 清空缓冲区用以下一轮接收 */</span></span><br><span class="line">        s_serialDataBuf.clear();</span><br><span class="line">        <span class="comment">/* 确定有多少目标语句 */</span></span><br><span class="line">        listCount = lineList.count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 处理分割后的每条语句 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            readData = lineList.at(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 当出现语句不完整（断句） */</span></span><br><span class="line">            <span class="keyword">if</span> (!(readData.contains(<span class="string">'\n'</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* 当前处理语句为待处理语句的最后一句（有效断句） */</span></span><br><span class="line">                <span class="keyword">if</span> (i == listCount - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/* 为断句补充标识 */</span></span><br><span class="line">                    s_serialDataBUf.append(<span class="string">'B'</span>);</span><br><span class="line">                    <span class="comment">/* 保存断句（存入清空后的缓冲区），承接下一轮接收 */</span></span><br><span class="line">                    s_serialDataBuf.append(readData);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/* 不是有效断句，直接跳过 */</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 语句中包含标识字符1 */</span></span><br><span class="line">            <span class="keyword">if</span> (readData.contains(<span class="string">"Target character2"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* code */</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 语句中包含标识字符2 */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (readData.contains(<span class="string">"Target character"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* code */</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*....*/</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* code */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Qt的“信号与槽”机制极大的便利了内部事件的处理，但是在接收串口数据时我们利用到Qt的这一机制，却发现接收到的数据往往是不连贯的，这是由于当
      
    
    </summary>
    
      <category term="Qt" scheme="YobeZhou.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="YobeZhou.github.io/tags/Qt/"/>
    
      <category term="C++" scheme="YobeZhou.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>标准库函数与运算符的区别</title>
    <link href="YobeZhou.github.io/2019/04/01/%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>YobeZhou.github.io/2019/04/01/标准库函数与运算符的区别/</id>
    <published>2019-04-01T02:26:52.000Z</published>
    <updated>2019-04-01T02:58:57.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>malloc与free是C++/C语言的标准库函数，new/delete是C++的运算符。它们都可用于申请动态内存和释放内存。下面来看他们的区别。</p><h1 id="标准库函数与运算符的区别"><a href="#标准库函数与运算符的区别" class="headerlink" title="标准库函数与运算符的区别"></a>标准库函数与运算符的区别</h1><h2 id="一、操作对象有所不同"><a href="#一、操作对象有所不同" class="headerlink" title="一、操作对象有所不同"></a>一、操作对象有所不同</h2><p>malloc与free是C++/C语言的标准库函数，new/delete是C++的运算符。对于非内部数据类型的对象而言，光用malloc/free无法满足动态对象的要求。</p><p>对象在创建的同时要自动执行构造函数，对象消亡之前要自动执行析构函数。由于malloc/free是库函数而不是运算符，不在编译器控制权限之内，不能把执行构造函数和析构函数的任务强加于malloc/free（注意：即malloc不会执行对象的构造函数，free不会执行对象的析构函数，而new会自动执行构造函数，delete会自动执行析构函数）。</p><p>运算符是语言自身的特性，它有固定的语义，而且编译器也知道意味着什么。就像 +-*/ 一样，由编译器解释语义，生成相应的代码。 库函数是依赖于库的，没有库就没有它，也就是一定程度上独立于语言的。理论上，编译器不知道也不关心函数的作用，编译器只保证编译函数，以及调用该函数时参数和返回值符合语法，并生成相应 call 函数的代码。但实际中一些高级点的编译器，都会对标准库自带的一些函数进行特别处理。</p><h2 id="二、在用法上也有所不同"><a href="#二、在用法上也有所不同" class="headerlink" title="二、在用法上也有所不同"></a>二、在用法上也有所不同</h2><p>函数malloc的原型如下：<br>void * malloc(size_t size);<br>用malloc 申请一块长度为length 的整数类型的内存，程序如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * length);</span><br></pre></td></tr></table></figure></p><p>我们应当把注意力集中在两个要素上：“类型转换”和“sizeof”。</p><ol><li><p>malloc返回值的类型是void <em>，所以在调用malloc时要显示地进行类型转换，将void </em> 转换成所需要的指针类型。</p></li><li><p>mallo函数本身并不识别要申请的内存是什么类型，它只关心内存的总字节数。</p></li></ol><p>函数free的原型如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">( <span class="keyword">void</span> * memblock )</span></span>;</span><br></pre></td></tr></table></figure></p><p><strong>为什么free 函数不象malloc 函数那样复杂呢？</strong><br>这是因为指针p的类型以及它所指的内存的容量事先都是知道的，语句free(p)能正确地释放内存。如果p是NULL指针，那么free对p无论操作多少次都不会出问题。如果p不是NULL指针，那么free对p连续操作两次就会导致程序运行错误。</p><h1 id="new-delete的使用要点"><a href="#new-delete的使用要点" class="headerlink" title="new/delete的使用要点"></a>new/delete的使用要点</h1><p>运算符new使用起来要比函数malloc简单得多，例如<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p1 = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * length);  </span><br><span class="line"><span class="keyword">int</span> *p2 = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br></pre></td></tr></table></figure></p><p>这是因为new 内置了sizeof、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，new在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么new的语句也可以有多种形式。</p><p>如果new创建对象数组，那么只能使用对象的无参构造函数。例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Obj *objects = <span class="keyword">new</span> Obj[<span class="number">100</span>]; <span class="comment">// 创建100 个动态对象</span></span><br></pre></td></tr></table></figure></p><p>不能写成<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Obj *objects = <span class="keyword">new</span> Obj[<span class="number">100</span>](<span class="number">1</span>);<span class="comment">// 创建100 个动态对象的同时赋初值1</span></span><br></pre></td></tr></table></figure></p><p>在用delete 释放对象数组时，留意不要丢了符号‘[ ]’。例如<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> []objects; <span class="comment">// 正确的用法  </span></span><br><span class="line"><span class="keyword">delete</span> objects; <span class="comment">// 错误的用法</span></span><br></pre></td></tr></table></figure></p><p>后者相当于<strong>delete objects[0]</strong>，漏掉了另外99个对象。</p><h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><ol><li>new自动计算需要分配的空间，而malloc需要手工计算字节数</li><li><p>new是类型安全的，而malloc不是，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">2</span>]; <span class="comment">// 编译时指出错误  </span></span><br><span class="line"><span class="keyword">int</span>* p = <span class="built_in">malloc</span>(<span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">float</span>)); <span class="comment">// 编译时无法指出错误</span></span><br></pre></td></tr></table></figure><p> <em>new operator 由两步构成，分别是 operator new 和 construct（构造）</em></p></li><li>operator new对应于malloc，但operator new可以重载，可以自定义内存分配策略，甚至不做内存分配，甚至分配到非内存设备上。而malloc无能为力</li><li>new将调用constructor（构造函数），而malloc不能；delete将调用destructor（析构函数），而free不能。</li><li>malloc/free要库文件支持，new/delete不要。</li></ol><h2 id="本质区别"><a href="#本质区别" class="headerlink" title="本质区别"></a>本质区别</h2><p>malloc/free是c/C++语言的标准库函数，new/delete是C++的运算符。<br>对于用户自定义的对象而言，用malloc/free无法满足动态管理对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于malloc/free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc/free。因此，C++需要一个能完成动态内存分配和初始化工作的运算符new，以及一个能完成清理与释放内存工作的运算符delete。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="keyword">public</span> :  </span><br><span class="line">    Obj( ) &#123; <span class="built_in">cout</span> &lt;&lt; “Initialization” &lt;&lt; <span class="built_in">endl</span>; &#125;  </span><br><span class="line">    ~ Obj( ) &#123; <span class="built_in">cout</span> &lt;&lt; “Destroy” &lt;&lt; <span class="built_in">endl</span>; &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Initialize</span><span class="params">( )</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; “Initialization” &lt;&lt; <span class="built_in">endl</span>; &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">( )</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; “Destroy” &lt;&lt; <span class="built_in">endl</span>; &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UseMallocFree</span><span class="params">( )</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Obj * a = (Obj * ) <span class="built_in">malloc</span>( <span class="keyword">sizeof</span> ( Obj ) ); <span class="comment">// allocate memory   </span></span><br><span class="line">    a -&gt; Initialize(); <span class="comment">// initialization  </span></span><br><span class="line">    <span class="comment">// …   </span></span><br><span class="line">    a -&gt; Destroy(); <span class="comment">// deconstruction   </span></span><br><span class="line">    <span class="built_in">free</span>(a); <span class="comment">// release memory  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UseNewDelete</span><span class="params">( <span class="keyword">void</span> )</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Obj * a = <span class="keyword">new</span> Obj;   </span><br><span class="line">    <span class="comment">// …   </span></span><br><span class="line">    <span class="keyword">delete</span> a;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类Obj的函数Initialize实现了构造函数的功能，函数Destroy实现了析构函数的功能。函数UseMallocFree中，由于 malloc/free不能执行构造函数与析构函数，必须调用成员函数Initialize和Destroy来完成“构造”与“析构”。（注意：即malloc不会执行对象的构造函数，free不会执行对象的析构函数，而new会自动执行构造函数，delete会自动执行析构函数）。<br>所以我们不要用 malloc/free来完成动态对象的内存管理，应该用new/delete。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言 malloc/free和new/delete是等价的。</p><h2 id="两者的联系"><a href="#两者的联系" class="headerlink" title="两者的联系"></a>两者的联系</h2><p>既然new/delete的功能完全覆盖了malloc /free，为什么C++还保留malloc/free呢？因为C++程序经常要调用C函数，而C程序只能用malloc/free管理动态内存。如果用 free释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用delete释放“malloc申请的动态内存”，理论上讲程序不会出错，但是该程序的可读性很差。所以new/delete，malloc/free必须配对使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;malloc与free是C++/C语言的标准库函数，new/delete是C++的运算符。它们都可用于申请动态内存和释放内存。下面来看他们的
      
    
    </summary>
    
      <category term="C/C++" scheme="YobeZhou.github.io/categories/C-C/"/>
    
    
      <category term="C++" scheme="YobeZhou.github.io/tags/C/"/>
    
      <category term="C" scheme="YobeZhou.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客主页文章展示实用设置</title>
    <link href="YobeZhou.github.io/2019/03/31/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%96%87%E7%AB%A0%E5%B1%95%E7%A4%BA%E5%AE%9E%E7%94%A8%E8%AE%BE%E7%BD%AE/"/>
    <id>YobeZhou.github.io/2019/03/31/Hexo博客主页文章展示实用设置/</id>
    <published>2019-03-31T14:26:30.000Z</published>
    <updated>2019-03-31T14:32:45.696Z</updated>
    
    <content type="html"><![CDATA[<p>调整主页文章展示间距，最后添加<br><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-tags</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br></pre></td></tr></table></figure><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-button</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font</span>-size-base;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$grey</span>-dim;</span><br><span class="line">    <span class="attribute">background</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="variable">$grey</span>-dim;</span><br><span class="line">    <span class="attribute">transition-property</span>: border;</span><br><span class="line"></span><br><span class="line">    +mobile() &#123; <span class="attribute">font-size</span>: <span class="variable">$font</span>-size-small; &#125;</span><br><span class="line">    +desktop-large() &#123; <span class="attribute">font-size</span>: <span class="variable">$font</span>-size-large; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123; <span class="attribute">border-bottom-color</span>: <span class="variable">$black</span>-deep; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改为<br><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-tags</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br></pre></td></tr></table></figure></p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-button</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font</span>-size-base;</span><br><span class="line">    <span class="attribute">color</span>: Red;  <span class="comment">// http://cc.oulu.fi/~thu/jwz/Colours/545454.html</span></span><br><span class="line">    <span class="attribute">background</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid Red;</span><br><span class="line">    <span class="attribute">transition-property</span>: border;</span><br><span class="line"></span><br><span class="line">    +mobile() &#123; <span class="attribute">font-size</span>: <span class="variable">$font</span>-size-small; &#125;</span><br><span class="line">    +desktop-large() &#123; <span class="attribute">font-size</span>: <span class="variable">$font</span>-size-large; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123; <span class="attribute">border-bottom-color</span>: <span class="variable">$black</span>-deep; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;调整主页文章展示间距，最后添加&lt;br&gt;&lt;figure class=&quot;highlight styl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
      <category term="Hexo相关" scheme="YobeZhou.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="YobeZhou.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>内存的三种地址及其转换</title>
    <link href="YobeZhou.github.io/2019/03/31/%E5%86%85%E5%AD%98%E7%9A%84%E4%B8%89%E7%A7%8D%E5%9C%B0%E5%9D%80%E5%8F%8A%E5%85%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>YobeZhou.github.io/2019/03/31/内存的三种地址及其转换/</id>
    <published>2019-03-31T13:09:11.000Z</published>
    <updated>2019-03-31T14:37:06.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天我们来学习一下 Linux 下的内存寻址，通常我们在谈内存地址的时候，我们在谈什么呢？所以首先我们得明确三种地址（以80x86微处理器为例）：</p><ul><li>逻辑地址（logical address）：机器语言指令中用来指定一个操作数或者一条指令的地址，每一个逻辑地址由一个段和偏移量组成，偏移量指明了从段开始的地方到实际地址之间的距离。</li><li>线性地址（linear address 也叫做虚拟地址 virtual address）：是一个 32 位无符号整数，可以用来表达 4GB 的地址，通常用十六进制数表示。</li><li>物理地址（physical address）：用于内存芯片内的内存单元寻址，它们从微处理器的地址引脚发送到内存总线上的电信号对应。<br><em>以上内容来自 《Understanding The Linux Kernel》</em></li></ul><p>内存管理单元（Memory Management Unit, MMU）通过分段单元的把一个逻辑地址转换成线性地址，通过分页单元把线性地址转换成物理地址。</p><h1 id="三种内存地址"><a href="#三种内存地址" class="headerlink" title="三种内存地址"></a>三种内存地址</h1><h2 id="逻辑地址"><a href="#逻辑地址" class="headerlink" title="逻辑地址"></a>逻辑地址</h2><p>包含在机器语言指令中用来指定一个操作数或一条指令的地址。这种寻址方式在 80X86 著名的分段结构中表现得尤为具体，它促使 MS-DOS 或 Windows 程序员把程序分成若干段。每一个逻辑地址都是有一个段和偏移量组成，偏移量指明了从段开始的地方到时间地址之间的距离。</p><h2 id="线性地址（虚拟地址）"><a href="#线性地址（虚拟地址）" class="headerlink" title="线性地址（虚拟地址）"></a>线性地址（虚拟地址）</h2><p>是一个32位无符号整数，可以用来表示高达4GB的地址，也就是高达4294967296个内存单元。线性地址通常用十六进制数字表示。</p><h2 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h2><p>用于内存芯片级内存单元寻址。它们与从微处理器的地址引脚发送到内存总线上的电信号相对应。物理地址由32位或36位无符号整数表示。</p><p>内存控制单元（MMU）通过一种称为分段单元的硬件电路把一个逻辑地址转换成线性地址</p><h1 id="分段与分页机制"><a href="#分段与分页机制" class="headerlink" title="分段与分页机制"></a>分段与分页机制</h1><p>从 80286 开始，Intel 处理器以两种不同的方式执行地址转换，分别为实模式（real mode）和保护模式（protected mode）。下面我们就展开描述，在保护模式下，硬件的分段机制和分页机制</p><h2 id="分段机制"><a href="#分段机制" class="headerlink" title="分段机制"></a>分段机制</h2><p>段选择符和段寄存器<br>逻辑地址有两部分组成：一个段标识符和一个偏移量。短标识符是一个 16 位的字段，成为段选择符；偏移量是一个 32 位长的字段。<br>为了快速找到段选择符，处理器提供了段寄存器用来存放段选择符，分别为 cs，ss，ds，es，fs，gs。<br>其中有三个有专门的用途：</p><ul><li>cs：代码段寄存器，指向包含程序指令的段</li><li>ss：栈段寄存器，指向包含当前程序栈的段</li><li>ds：数据段寄存器，指向包含静态数据或者全局数据段<br>其中，cs 含有一个两位的字段，用来指明当前的 CPU 特权等级（CPL），0 代表最高等级、3 代表最低等级。 Linux 只用到了 0 和 3，分别称为 内核态 和 用户态</li></ul><h3 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h3><p>每个段由一个 8 字节的段描述符表示，描述了段的基本信息。段描述符放在全局描述符表（GDT）或者局部描述符表（LDT）中。<br>通常只会定义一个 GDT，每个进程除了放在 GDT 中的段以外，如还需要创建附加的段，就可以有自己的 LDT。GDT 在主存中的地址和大小存放在 gdtr 控制寄存器中，LDT 的地址和大小则存放在 ldtr 中。<br>段描述符包涵以下关键字段：</p><p>Base：包含段的首字节的线性地址<br>Type：描述了段的类型特征和它的存取权限<br>DPL：限制对这个段的存取权限，表示访问这个段的要求的最小 CPU 特权等级<br>P：Segment-Present 标志，表明当前段是否在内存中。Linux 总是把这个标志设为 1，从来不会把整个段交换到磁盘上去</p><h3 id="分段单元"><a href="#分段单元" class="headerlink" title="分段单元"></a>分段单元</h3><p>那么逻辑地址是如何转换到线性地址的呢？</p><ol><li>先检查段选择符的TI字段，已决定段描述符保存在哪一个描述符表中。TI字段指明描述符是在GDT中（在这种情况下，分段单元从gdtr寄存器中得到GDT的线性基地址）还是在激活的LDT中（在这种情况下，分段单元从ldtr寄存器中得到LDT的线性基地址）</li><li>从段选择符的index字段计算段描述符的地址，index字段的值乘以8，这个结果与gdtr或ldtr寄存器的内容相加</li><li>把逻辑地址的偏移量与段描述符base字段的值相加就得到了线性地址</li></ol><p>第二个称为分页单元的硬件电路把线性地址转化成一个物理地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">       分段单元       分页单元</span><br><span class="line">逻辑地址 ----&gt; 线性地址 ----&gt; 物理地址</span><br></pre></td></tr></table></figure></p><p>实际上，分段和分页在某种程度上有点多余，因为它们都可以划分进程的物理地址空间：<br>分段可以给每一个进程分配不同的线性地址空间，而分页可以把同一线性地址空间映射到不同的物理空间，与分段相比，Linux更喜欢使用分页方式。<br>因为当所有进程使用相同的段寄存器值时，内存管理变得更简单，也就是说它们能共享同样的一组线性地址。<br>Linux设计目标之一是可以把它移植到绝大多数流行的处理器平台上。然而，RISC体系结构对分段的支持很有限。<br>在多处理系统中，所有与CPU都共享同一内存；这意味着RAM芯片可以由独立的CPU并发访问。<br>因为在RAM芯片上的读或写操作必须串行的执行。因此一种所谓内存仲裁器的硬件电路插在总线和每个RAM芯片之间，作用是如果某个RAM芯片空闲，就准予一个CPU访问，如果该芯片忙于为另一个处理器提出的请求服务，就延迟这个CPU的访问。<br>即使在单处理器上也使用内存仲裁器，因为单处理器系统中包含有一个叫做DMA控制器的特殊处理器，而DMA控制器与CPU并发操作。<br>在多处理器系统的情况下，因为仲裁器有多个输入端口，所以其结构更加复杂。<br>例如：双Pentium在每个芯片的入口维持一个两端口仲裁器，并在试图使用公用总线前请求两个CPU交换同步信息。</p><p>仲裁器由硬件电路管理，是隐藏的。</p><h3 id="快速访问分段机制"><a href="#快速访问分段机制" class="headerlink" title="快速访问分段机制"></a>快速访问分段机制</h3><p>如果每次都执行上述的过程，可能会比较耗时，因为 GDT 是存储在主存中的，每次都访问主存，可能会比较慢，所以为了提高逻辑地址到线性地址的转换速度，80x86 处理器提供了一组6个不可编程寄存器。每一个不可编程寄存器含有 8 个字节的段描述符，具体的值由相对应的段寄存器中的段描述符确定。每当一个段选择符被装入段寄存器，相对应的段描述符就由主存装入到对应的不可编程寄存器，这样就可以不需要上面三个过程中的前两个，就可以得到线性地址了。</p><h2 id="分页机制"><a href="#分页机制" class="headerlink" title="分页机制"></a>分页机制</h2><h3 id="页、页框和页表"><a href="#页、页框和页表" class="headerlink" title="页、页框和页表"></a>页、页框和页表</h3><p>分页单元把线性地址转换成物理地址，其中的关键任务是把所请求的访问类型与线性地址的访问权限做对比。</p><ul><li>页：为了更高效和更经济的管理内存，线性地址被分为以固定长度为单位的组，成为页。页内部连续的线性地址空间被映射到连续的物理地址中。这样，内核可以指定一个页的物理地址和对应的存取权限，而不用指定全部线性地址的存取权限。这里说页，同时指一组线性地址以及这组地址包含的数据</li><li>页框：分页单元把所有的 RAM 分成固定长度的页框，每一个页框包含一个页。页框是主存的一部分，因此也是一个存储区域。页和页框相比，前者只是一个数据块，可以存放在页框或者磁盘中。</li><li>页表：把线性地址映射到物理地址的数据结构成为页表，页表存放在主存中，并在启用分页单元之前必须由内核对页表进行适当的初始化</li></ul><h3 id="常规的分页"><a href="#常规的分页" class="headerlink" title="常规的分页"></a>常规的分页</h3><p>从 80386 开始，Intel 处理器的页大小为 4KB。<br>32 位的线性地址被分为 3 个域：</p><ul><li>Directory（目录）：最高 10 位</li><li>Table（页表）：中间 10 位</li><li>Offset（偏移量）：最低 12 位<br>线性地址的转换分两步完成，每一步都基于一种转换表，第一种转换表成为页目录表，第二种转换表成为页表。</li></ul><p>为什么需要两级呢？目的在于减少每个进程页表所需的 RAM 的数量。如果使用简单的一级页表，将需要高达 2^20 个表项来表示每个进程的页表，即时一个进程并不使用所有的地址，二级模式通过职位进程实际使用的那些虚拟内存区请求页表来减少内存容量。每个活动的进程必须有一个页目录，但是却没有必要马上为所有进程的所有页表都分配 RAM，只有在实际需要一个页表时候才给该页表分配 RAM。</p><p>页目录项和页表项的结构如下：</p><ul><li>Present 标志：为 1 则表示页在主存中；如果为 0 则表示不在内存中，如果执行一个地址转换的时候，所需的页表项或者页目录项中的该标志为 0，那么分页单元就把该线性地址存在在控制寄存器 cr2 中，并产生 14 号异常：缺页异常。</li><li>包含页框物理地址最高 20 位的字段</li><li>Dirty：当对页框进行写操作时就设置这个标志</li><li>Read/Write 标志：含有页或者页表的存取权限</li><li>User/Supervisor：含有访问页或者页表所需的特权等级</li></ul><p>了解了以上结构之后，我们看看如何从线性地址转换到物理地址的：</p><ul><li>线性地址中的 Directory 字段决定页目录中的目录项，目录项指向适当的页表</li><li>线性地址中的 Table 字段又决定页表的页表项，页表项含有页所在页框的物理地址</li><li>线性地址中的 Offset 地段决定了页框内的相对位置，由于 offset 为 12 为，所以一页含有 4096 字节的数据</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上描述的为 80x86 微处理器硬件分页机制，不同架构的 64 位处理器分页机制，大体的思路就是将二级模式拓展为三级（ia64）或者四级（x86_64），以达到对更大范围寻址空间的支持。</p><h1 id="笔记：16进制线性地址转换"><a href="#笔记：16进制线性地址转换" class="headerlink" title="笔记：16进制线性地址转换"></a>笔记：16进制线性地址转换</h1><p>16进制的线性地址转化为地址的物理空间大小。<br>如：0x00000000  -  0x08000000的物理空间大小为128MB<br>    换算：0x08000000 === 134217728 (Bytes)<br>          134217728(Bytes) / 1024 = 131072(KB)<br>          131072(KB) / 1024 = 128(MB)  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天我们来学习一下 Linux 下的内存寻址，通常我们在谈内存地址的时候，我们在谈什么呢？所以首先我们得明确三种地址（以80x86微处理器为
      
    
    </summary>
    
      <category term="嵌入式" scheme="YobeZhou.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="操作系统" scheme="YobeZhou.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="嵌入式" scheme="YobeZhou.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="硬件" scheme="YobeZhou.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo提交搜索引擎收录（Google+Baidu）</title>
    <link href="YobeZhou.github.io/2019/03/31/Hexo%E6%8F%90%E4%BA%A4%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%94%B6%E5%BD%95%EF%BC%88Google-Baidu%EF%BC%89/"/>
    <id>YobeZhou.github.io/2019/03/31/Hexo提交搜索引擎收录（Google-Baidu）/</id>
    <published>2019-03-31T03:42:24.000Z</published>
    <updated>2019-03-31T03:42:24.811Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>递增与减运算符：++与--</title>
    <link href="YobeZhou.github.io/2019/03/31/%E9%80%92%E5%A2%9E%E4%B8%8E%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A++%E4%B8%8E--/"/>
    <id>YobeZhou.github.io/2019/03/31/递增与减运算符：++与--/</id>
    <published>2019-03-31T03:04:12.000Z</published>
    <updated>2019-04-01T02:58:12.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>紧凑的代码让程序更为整洁，而且通常其生成的机器代码效率更高。</p><h1 id="递增与递减运算符"><a href="#递增与递减运算符" class="headerlink" title="递增与递减运算符"></a>递增与递减运算符</h1><p>递增运算符(increment operator)将其运算对象递增1；递减运算符(decrement operator)将其运算递减1，该运算符以两种方式出现(两种模式的区别在于递增&amp;递减行为发生的时间不同)：</p><pre><code>1. &quot;++&quot;出现在其作用的变量前面---前缀模式(++a)    如：q = 2*++a;        • 首先，a递增1；        • 然后，2乘以a，并将结果赋给q2. &quot;++&quot;出现在其作用的变量后面---后缀模式(a++)    如：q = 2*a++;        • 首先，2乘以a，并将结果赋给q；        • 然后，a递增1</code></pre><p>同理可得：</p><pre><code>&quot;--&quot;出现在其作用的变量前面 ----&gt; 前缀模式(--a)&quot;--&quot;出现在其作用的变量后面 ----&gt; 后缀模式(a--)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;紧凑的代码让程序更为整洁，而且通常其生成的机器代码效率更高。&lt;/p&gt;
&lt;h1 id=&quot;递增与递减运算符&quot;&gt;&lt;a href=&quot;#递增与递减运算
      
    
    </summary>
    
      <category term="C/C++" scheme="YobeZhou.github.io/categories/C-C/"/>
    
    
      <category term="C" scheme="YobeZhou.github.io/tags/C/"/>
    
      <category term="C/C++" scheme="YobeZhou.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客next主题添加Gitment评论系统</title>
    <link href="YobeZhou.github.io/2019/03/30/Hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>YobeZhou.github.io/2019/03/30/Hexo博客next主题添加Gitment评论系统/</id>
    <published>2019-03-30T14:12:49.000Z</published>
    <updated>2019-04-05T01:02:12.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo框架搭建好之后，默认的功能模块有限，因此很多模块需要我们自己去添加，对于我们的博客网站来说，没有评论系统怎么行呢？毕竟我们需要采集良言，及时发现文章的不足并且可以帮助仍有疑问的朋友解答问题。话不多说，我们开始搭建博客的评论系统吧。</p><h1 id="Gitment评论系统"><a href="#Gitment评论系统" class="headerlink" title="Gitment评论系统"></a>Gitment评论系统</h1><p>我们首先了解一下国内的几个第三方评论系统，如“多说”，“畅言”，“友言”，“新浪云跟贴”：</p><ol><li>多说，曾经较火的评论系统，网上介绍文章比较多，但已关闭，无法再用了。</li><li>畅言，sohu旗下的，但是需要个人博客备案后才能使用，但github pages个人博客感觉备案比较难。</li><li>友言，jiaThis旗下的，由于时http请求，github pages现在都是https了， 在https站点无法调用http请求，故也无法使用。</li><li>网易云跟贴，曾被当作“多说”的替代品，可惜官方通报说也将在2017.08.01关闭了。<br><strong>Gitment，一款由国内大神imsun开发的基于github issues的评论系统, 具体介绍请看<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">项目主页</a></strong></li></ol><h2 id="Gitment简介"><a href="#Gitment简介" class="headerlink" title="Gitment简介"></a>Gitment简介</h2><p><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a> 是基于 GitHub Issues 的评论系统，是 imsun 利用 github 上的 issues 做的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown&amp;GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。想了解具体效果，可以点击查看官方Demo Page:<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment Demo</a>。</p><h2 id="注册OAuth-Application"><a href="#注册OAuth-Application" class="headerlink" title="注册OAuth Application"></a>注册OAuth Application</h2><p>首先我们先去 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">OAuth application</a> 进行注册，申请一个 Github OAuth Application。填写参考如下：</p><ol><li>Application name: 博客名字</li><li>Homepage URL: 网站主页地址(这里我填写的是域名或github项目地址/index.html大部分的默认网页都是index.html)</li><li>Application description: 描述，选填</li><li>Authorization callback URL: 填写域名或github项目地址</li></ol><p>填写相关信息时注意在 Authorization callback URL 一项填自己的网站url：<br><figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://username.github.io</span></span><br></pre></td></tr></table></figure></p><p>填写完毕后点击 Register application 若创建成功则将跳转到另外一个界面，此时我们会得到一个 client ID 和一个 client secret，它们将被用于之后的用户登录。</p><h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改 _config.yml"></a>修改 <strong>_config.yml</strong></h2><p>我们需要在 Hexo 主题目录下编辑修改 _config.yml 配置文件。不同的主题的配置文件存放路径有所差别，下面以 netx 主题为例说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next主题的配置文件路径：&quot;/themes/next/_config.yml&quot;</span><br></pre></td></tr></table></figure></p><p>打开配置文件后，我们搜索关键字“Gitment”将定位到配置位置。默认的配置内容为：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitment</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line"><span class="attr">  lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line"><span class="attr">  cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line"><span class="attr">  language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line"><span class="attr">  github_user:</span> <span class="comment"># MUST HAVE, Your Github ID</span></span><br><span class="line"><span class="attr">  github_repo:</span> <span class="comment"># MUST HAVE, The repo you use to store Gitment comments</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="comment"># MUST HAVE, Github client id for the Gitment</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="comment"># EITHER this or proxy_gateway, Github access secret token for the Gitment</span></span><br><span class="line"><span class="attr">  proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line"><span class="attr">  redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure></p><p>我们修改成自己的配置内容：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加Gitment评论系统</span></span><br><span class="line"><span class="comment"># Gitment</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr"> enable:</span> <span class="literal">true</span>                <span class="comment"># 修改为 true</span></span><br><span class="line"><span class="attr"> mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line"><span class="attr"> count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line"><span class="attr"> lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line"><span class="attr"> cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line"><span class="attr"> language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line"><span class="attr"> github_user:</span> <span class="number">123456</span>          <span class="comment"># 填写自己的 github ID</span></span><br><span class="line"><span class="attr"> github_repo:</span> <span class="string">xxx.github.io</span>   <span class="comment"># 存储评论内容的仓库名</span></span><br><span class="line"><span class="attr"> client_id:</span> <span class="string">abcd123456abcd</span>    <span class="comment"># 填写获取到的 client_id</span></span><br><span class="line"><span class="attr"> client_secret:</span> <span class="string">abcd123456efg</span> <span class="comment"># 填写获取到的 client_secret</span></span><br><span class="line"><span class="attr"> proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line"><span class="attr"> redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure></p><h2 id="获取自己的-Github-ID"><a href="#获取自己的-Github-ID" class="headerlink" title="获取自己的 Github ID"></a>获取自己的 Github ID</h2><p>在浏览器中打开下面的地址，”Your github username”需要修改为自己的Github username:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.github.com/users/"Your github username"</span><br></pre></td></tr></table></figure></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p> 在 Hexo 根目录输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>浏览器打开地址：<br><figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:4000/</span></span><br></pre></td></tr></table></figure></p><p>浏览自己的一篇博客到最后，如果发现有评论界面则大功告成！如果没有应该时配置信息没写对，请检查自己的配置内容。</p><div style="width: auto; margin: auto"><img src="/images/Gitment_test_interface.png" alt="Gitment_test_interface"></div><p>但是此时出现了错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:Not Found</span><br></pre></td></tr></table></figure></p><p>经过检查后发现是 owner 或 repo 配置错误<br>    将 github_user 直接填写自己的Github用户名即可。</p><p>然而此时仍有可能出现如下的问题：<br><img src="/images/Gitment_CommentsNotInitialized.png" alt><br>或英文提示：”Error: Comments Not Initialized”。原因有如下两点：</p><ol><li>在该页面的Gitment评论区登陆GitHub账号</li><li>之前OAuth Application callback填写有误<br>若当点击评论区的“使用Github登陆”跳转出现报错，则可以确定是之前“OAuth Application callback”填写有误，我们需要返回到自己的Github设置上去修改过来：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Github头像下拉菜单 --&gt; Settings --&gt; 左边Developer settings下的OAuth Application --&gt; Register a new application，进入到填写相关信息页面。</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Authorization callback URL 一定要写自己Github Pages的URL.</span><br><span class="line">如：https://Yobe.github.io</span><br></pre></td></tr></table></figure><p>检查无误可正常使用后，即可部署到我们的 Github 上:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Hexo框架搭建好之后，默认的功能模块有限，因此很多模块需要我们自己去添加，对于我们的博客网站来说，没有评论系统怎么行呢？毕竟我们需要采集良
      
    
    </summary>
    
      <category term="Hexo相关" scheme="YobeZhou.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="YobeZhou.github.io/tags/Hexo/"/>
    
      <category term="Gitment" scheme="YobeZhou.github.io/tags/Gitment/"/>
    
  </entry>
  
  <entry>
    <title>计算机术语-簇</title>
    <link href="YobeZhou.github.io/2019/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%AF%E8%AF%AD-%E7%B0%87/"/>
    <id>YobeZhou.github.io/2019/03/30/计算机术语-簇/</id>
    <published>2019-03-30T12:31:06.000Z</published>
    <updated>2019-03-31T14:00:24.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  数据存储在硬盘的时候都是以簇为单位，所以无论文件大小是多少，除非正好是簇大小的倍数，否则文件所占用的最后一个簇或多或少都会产生一些剩余的空间，且这些空间又不能给其它文件使用，即使这个文件只有0字节，也不允许两个文件或两个以上的文件共用一个簇，不然会造成数据混乱。</p><table><thead><tr><th style="text-align:center">中文名</th><th style="text-align:center">簇</th></tr></thead><tbody><tr><td style="text-align:center">外文名</td><td style="text-align:center">CLUST</td></tr><tr><td style="text-align:center">存储管理</td><td style="text-align:center">最小单位</td></tr><tr><td style="text-align:center">属    性</td><td style="text-align:center">单位名称</td></tr><tr><td style="text-align:center">本    意</td><td style="text-align:center">“一群”、“一组”</td></tr><tr><td style="text-align:center">解    释</td><td style="text-align:center">一组扇区</td></tr></tbody></table><div style="width: auto; margin: auto"><img src="/images/磁盘上的磁道扇区和簇.jpg" alt></div><p>  微软操作系统（DOS、WINDOWS等）中磁盘文件存储管理的最小单位叫做“簇”<br>  一个文件通常存放在一个或多个簇里，但至少要单独占据一个“簇”。 也就是说两个文件不能存放在同一个簇中。<br>簇（CLUST）的本意就是“一群”、“一组”，即一组扇区(一个磁道可以分割成若干个大小相等的圆弧，叫扇区)的意思。因为扇区的单位太小，因此把它捆在一起，组成一个更大的单位更方便进行灵活管理。簇的大小通常是可以变化的，是由操作系统在所谓“（高级）格式化”时规定的，因此管理也更加灵活。<br>  通俗地讲文件就好比是一个家庭，数据就是人，即家庭成员；所谓簇就是一些单元套房；扇区是组成这些单元套房的一个个大小相等的房间。一个家庭可能住在一套或多套单元房子里，但一套房子不能同时住进两个家庭的成员。 文件系统是操作系统与驱动器之间的接口，当操作系统请求从硬盘里读取一个文件时，会请求相应的文件系统（FAT 16/FAT32/NTFS）打开文件。扇区是磁盘最小的物理存储单元，但由于操作系统无法对数目众多的扇区进行寻址，所以操作系统就将相邻的扇区组合在一起，形成一个簇，然后再对簇进行管理。每个簇可以包括2、4、8、16、32或64个扇区。显然，簇是操作系统所使用的逻辑概念，而非磁盘的物理特性。<br>  为了更好地管理磁盘空间和更高效地从硬盘读取数据，操作系统规定一个簇中只能放置一个文件的内容，因此文件所占用的空间，只能是簇的整数倍；如果文件实际大小小于一簇，它也要占一簇的空间。如果文件实际大小大于一簇，根据逻辑推算，那么该文件就要占两个簇的空间。所以，一般情况下文件所占空间要略大于文件的实际大小，只有在少数情况下，即文件的实际大小恰好是簇的整数倍时，文件的实际大小才会与所占空间完全一致。<br>  一个簇只能容纳一个文件占用，即使这个文件只有0字节，也决不允许两个文件或两个以上的文件共用一个簇，不然会造成数据混乱。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  数据存储在硬盘的时候都是以簇为单位，所以无论文件大小是多少，除非正好是簇大小的倍数，否则文件所占用的最后一个簇或多或少都会产生一些剩余的
      
    
    </summary>
    
      <category term="操作系统" scheme="YobeZhou.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="YobeZhou.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hexo基本设置</title>
    <link href="YobeZhou.github.io/2019/03/30/Hexo%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"/>
    <id>YobeZhou.github.io/2019/03/30/Hexo基本设置/</id>
    <published>2019-03-30T05:40:16.000Z</published>
    <updated>2019-03-30T15:31:18.317Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Hexo相关" scheme="YobeZhou.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="YobeZhou.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>“Hexo+Github Page+个人域名”搭建个人专属博客</title>
    <link href="YobeZhou.github.io/2019/03/30/%E2%80%9CHexo+Github_Page+%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E2%80%9D%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/"/>
    <id>YobeZhou.github.io/2019/03/30/“Hexo+Github_Page+个人域名”搭建个人专属博客/</id>
    <published>2019-03-30T05:29:53.000Z</published>
    <updated>2019-04-02T03:48:39.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用 Hexo+Github我们快速的搭建自己的个人博客，整个过程下来我们几乎不需要什么金钱成本（在个人服务器上部署可选），所付出的仅仅是自己对于其的时间精力上的管理成本。而 Hexo 基于MakrDown 语法编辑页面，在书写方面我们将得到极大的便利。最后绑定自己的个人域名我们的博客访问过程将更加便利。</p><blockquote><p>本文的操作环境为： Windows 10 64bit。</p></blockquote><h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><p><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，我们可以非常方便快速地利用靓丽的主题生成自定义的静态网页。</p><h2 id="Hexo的优缺点分析"><a href="#Hexo的优缺点分析" class="headerlink" title="Hexo的优缺点分析"></a>Hexo的优缺点分析</h2><ul><li>优点<ul><li>免费 - GitHub</li><li>快速 - Node运行环境、前端个人站点首选</li><li>简洁 - MarkDown</li><li>轻量 - 全部静态文件</li><li>支持导入WordPress等博客</li></ul></li><li>不足<ul><li>更换电脑不变 - 需重新安装环境</li><li>静态博客 - 不便于后期维护</li><li>多媒体管理不方便</li></ul></li></ul><h2 id="Hexok工作原理"><a href="#Hexok工作原理" class="headerlink" title="Hexok工作原理"></a>Hexok工作原理</h2><p>hexo 可以理解为是基于node.js制作的一个博客工具，不是我们理解的一个开源的博客系统。<br>我们不需要将 Hexo 部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器，也就是说我们可以几乎没有任何成本地搭建一个自己的个人博客。简而言之：hexo是个静态页面生成、上传的工具。</p><h1 id="Hexo-环境搭建"><a href="#Hexo-环境搭建" class="headerlink" title="Hexo 环境搭建"></a>Hexo 环境搭建</h1><p>我们可以在服务器上或在自己的本地电脑上安装部署 Hexo，安装 Hexo 的过程非常简单，只需几分钟即可完成！</p><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>在安装前，我们必须检查电脑中是否已安装下列应用程序，如果是第一次安装请先去对应的官网下载安装包：</p><ul><li><a href="https://nodejs.org" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js的过程非常简单按照提示安装即可，打开cmd命令行，成功界面如下：</p><p><img src="/images/checkNodejsInstall.png" alt></p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。我们用 git 来管理自己的hexo博客文章，并上传到GitHub。<br>git的过程非常简单按照提示安装即可，安装成功后我们在电脑上任何位置鼠标右键能够出现如下两个选择：</p><p><img src="/images/GitSuccess.jpg" alt></p><blockquote><p>注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图</p></blockquote><p><img src="/images/checkGitSetting.png" alt></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>前面 Node.js 和 git 安装好后，现在我们就可以安装hexo了，你可以先创建一个文件夹 blog ，然后在命令行模式下定位当前目录到这个文件夹下（或者在这个文件夹下直接右键git bash打开）（或者在文件下的路径处输入 cmd 并回车）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>初始化自己的 blog 文件夹（需要耐心等待）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>初始化完成后将会看到如下内容，即说明初始化成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO Start blogging with Hexo!</span><br></pre></td></tr></table></figure></p><p>最后安装所需的组件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>万事具备！我们来开始首次体验 Hexo吧！输入下面的命令，将最后得到 Hexo 本地运行的地址复制到浏览器即可预览 demo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></p><blockquote><p>假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p [端口号]”来改变端口号。<br>在 Hexo 保持在本地运行的状态时 “hexo s”，我们对 Hexo 的任何更改都会立即被应用，只需刷新网页即可预览。</p></blockquote><h1 id="Github部分"><a href="#Github部分" class="headerlink" title="Github部分"></a>Github部分</h1><p>如果没有自己的 Github 账户，就先去<a href="(https://github.com/">注册</a>)自己的 Github 账户吧。<br>注册完登录后，在GitHub.com中看到一个New repository，我们点击它以新建仓库。</p><p><img src="/images/GithubCreatNewRepositories.png" alt="GithubCreatNewRepositories"><br>接下来我们需要创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。这里我是已经建过了：</p><p><img src="/images/Create_a_new_epository.png" alt="Create_a_new_epository"></p><blockquote><p>在Github中创建的与自己用户名相同的仓库，会被识别为 Github page 的展示默认主页（唯一的），而其他仓库则被是为普通项目。</p></blockquote><h2 id="修改配置使与-Github-仓库关联"><a href="#修改配置使与-Github-仓库关联" class="headerlink" title="修改配置使与 Github 仓库关联"></a>修改配置使与 Github 仓库关联</h2><p>打开“blog”根目录下的”_config.yml”。需要修改的地方有：网站名，介绍，关键字（这部分自己取），url 即是“http://用户名.github.io“。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">YobeZhou</span>     <span class="comment"># 网站名，默认为 Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="attr">description:</span>        <span class="comment"># 网站介绍</span></span><br><span class="line"><span class="attr">keywords:</span>           <span class="comment"># 网站关键字</span></span><br><span class="line"><span class="comment"># author: John Doe</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">周岳标</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span>   <span class="comment"># 设置语言为汉语</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/images/touxiang.jpg</span> <span class="comment"># 头像</span></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="comment"># url: http://yoursite.com</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">YobeZhou.github.io</span> <span class="comment"># 你的网址，也为个人域名</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure></p><p>现在我们打开 Github 获取仓库地址, 点击头像 -&gt; Your profile</p><p><img src="/images/MyGitProfile.png" alt="GitProfile"></p><p>点击查看对应的仓库（即为之前新建的 Github page 专用仓库），之后点击“Clone or download”，复制仓库地址</p><p><img src="/images/cloneOrDownload.png" alt="cloneOrDownload"><br>紧接着我们回到刚刚编辑的”_config.yml”文件中，搜索定位“deploy”所在位置，我获取到的仓库地址为：“<a href="https://github.com/YobeZhou/YobeZhou.github.io.git”" target="_blank" rel="noopener">https://github.com/YobeZhou/YobeZhou.github.io.git”</a> ，这要填写在下面的“repo: ”中，请参考配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:YobeZhou/YobeZhou.github.io.git</span>  </span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"><span class="comment">#  branch: [branch] #published. branch: master</span></span><br><span class="line"><span class="comment">#  message: [message]</span></span><br></pre></td></tr></table></figure></p><blockquote><p>对语法格式要求严格，修改时请务必注意缩进和空格。</p></blockquote><p>最后生成部署即可！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生成命令： hexo g</span><br><span class="line">部署命令： hexo d</span><br></pre></td></tr></table></figure></p><p>或者一键生成部署命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure></p><blockquote><p>第一次提交会弹出输入框要求你输入用户名、密码登录：<br><img src="/images/loginGithubForHexo.jpg" alt="loginGithub"></p></blockquote><p>显示出 “INFO Deploy done: git” 表示成功发布到github上！现在在浏览器上输入 “用户名.github.io” 即可访问自己的博客（你可以把这个链接发布给小伙伴啦）</p><h1 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h1><h2 id="域名申请"><a href="#域名申请" class="headerlink" title="域名申请"></a>域名申请</h2><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><h2 id="博客域名升级Https"><a href="#博客域名升级Https" class="headerlink" title="博客域名升级Https"></a>博客域名升级Https</h2><p>Github 从 2009 年开始支持自定义域名，从 2016 年开始 *.github.io 域名支持 Https，从2018年5月1日 GitHub Pages 上的自定义域名也开始支持 Https。<br>Github 和 Let’s Encrypt 合作对建立在其上的自定义域名站点进行的证书颁发和认证。如果之前域名是做的 CNAME 或者 Alias 的 DNS 记录，则直接支持 Https 访问；如果是 A 记录做的解析，则需要更换 A 记录指向的 IP 地址为新的给定地址。最后在 Github Pages 仓库的设置页选中 “Enforce HTTPS” 选项即可。<br>配置过程非常简单，设置完稍等几分钟再次访问自己的主页将会发现已经升级成功！</p><p><img src="/images/UpgradTohttps.png" alt="成功升级为Https"></p><h1 id="后续学习"><a href="#后续学习" class="headerlink" title="后续学习"></a>后续学习</h1><p>本文中介绍完基于Hexo及Github page搭建专属的个人博客的详细方法。万事开头难，现在我们仅仅是把平台搭建好了，接下来我们应该趁热打铁继续深入学习探索，请参考我的其他文章：<br><a href>Hexo基本设置</a><br><a href>hexo使用技巧</a><br><a href>Hexo的专用编辑器-HexoEditor</a><br><a href>什么是Markdown？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用 Hexo+Github我们快速的搭建自己的个人博客，整个过程下来我们几乎不需要什么金钱成本（在个人服务器上部署可选），所付出的仅仅是自
      
    
    </summary>
    
      <category term="Hexo相关" scheme="YobeZhou.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="YobeZhou.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="YobeZhou.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的专用编辑器-HexoEditor</title>
    <link href="YobeZhou.github.io/2019/03/30/Hexo%E7%9A%84%E4%B8%93%E7%94%A8%E7%BC%96%E8%BE%91%E5%99%A8-HexoEditor/"/>
    <id>YobeZhou.github.io/2019/03/30/Hexo的专用编辑器-HexoEditor/</id>
    <published>2019-03-30T03:41:40.000Z</published>
    <updated>2019-03-31T14:00:15.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>‘Hexo’ 是一款基于 ‘Node.js’ 的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 ‘GitHub’ 和 ‘Coding’ 上，是搭建博客的首选框架。 由于 ‘Hexo’ 使用[markdown]语法的纯文本编辑，所以在写作的时候我们需要使用一些工具方能达到事半功倍的效果。</p><h1 id="HexoEditor"><a href="#HexoEditor" class="headerlink" title="HexoEditor"></a>HexoEditor</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>接下来要介绍给大家的 ‘HexoEditor’ 便是网上有人针对 ‘Hexo’ 做了优化的 ‘Markdown’ 编辑器，其使用 [Electron] 做框架，修改自 [Moeditor] 支持 Markdown，Latex 等。使用它我们可以为 ‘Hexo’ 下的博客更好的去书写内容。这是<a href="https://github.com/zhuzhuyule/HexoEditor/" target="_blank" rel="noopener">HexoEditor</a>的开源项目地址。</p><h2 id="快速下载安装"><a href="#快速下载安装" class="headerlink" title="快速下载安装"></a>快速下载安装</h2><p>在 ‘Github’ 项目中并没有给出，可安装的 ‘releases’ 版本，如想省去麻烦的安装过程请在下面的地址下载。<br>下载地址：</p><p>Windows x64:</p><pre><code>https://github.com/zhuzhuyule/HexoEditor/releases/download/v1.5.30/HexoEditor_1.5.30_win_x64.exe</code></pre><p>Macx64:</p><pre><code>https://github.com/zhuzhuyule/HexoEditor/releases/download/v1.5.30/HexoEditor_1.5.30_mac_x64.dmg</code></pre><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><table><thead><tr><th style="text-align:left">按键</th><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:left">Tab</td><td style="text-align:center">tabAdd</td><td style="text-align:center">添加缩进</td></tr><tr><td style="text-align:left">Shift - Tab</td><td style="text-align:center">tabSubtract</td><td style="text-align:center">减少缩进</td></tr><tr><td style="text-align:left">Ctrl - B</td><td style="text-align:center">toggleBlod</td><td style="text-align:center">切换粗体</td></tr><tr><td style="text-align:left">Ctrl - I</td><td style="text-align:center">toggleItalic</td><td style="text-align:center">切换斜体</td></tr><tr><td style="text-align:left">Ctrl - D</td><td style="text-align:center">toggleDelete</td><td style="text-align:center">删除当前行</td></tr><tr><td style="text-align:left">Ctrl - `</td><td style="text-align:center">toggleComment</td><td style="text-align:center">切换注解</td></tr><tr><td style="text-align:left">Ctrl - L</td><td style="text-align:center">toggleUnOrderedList</td><td style="text-align:center">切换无序列表</td></tr><tr><td style="text-align:left">Ctrl - Alt - L</td><td style="text-align:center">toggleOrderedList</td><td style="text-align:center">切换有序列表</td></tr><tr><td style="text-align:left">Ctrl - ]</td><td style="text-align:center">toggleHeader</td><td style="text-align:center">降级标题</td></tr><tr><td style="text-align:left">Ctrl - [</td><td style="text-align:center">toggleUnHeader</td><td style="text-align:center">升级标题</td></tr><tr><td style="text-align:left">Ctrl - =</td><td style="text-align:center">toggleBlockquote</td><td style="text-align:center">增加引用</td></tr><tr><td style="text-align:left">Ctrl - -</td><td style="text-align:center">toggleUnBlockquote</td><td style="text-align:center">减少引用</td></tr><tr><td style="text-align:left">Ctrl - U</td><td style="text-align:center">drawLink</td><td style="text-align:center">添加超级链接</td></tr><tr><td style="text-align:left">Ctrl - Alt - U</td><td style="text-align:center">drawImageLink</td><td style="text-align:center">添加图片</td></tr><tr><td style="text-align:left">Ctrl - T</td><td style="text-align:center">drawTable(row col)</td><td style="text-align:center">添加表格(行 列)</td></tr><tr><td style="text-align:left">Ctrl - V</td><td style="text-align:center">pasteOriginContent</td><td style="text-align:center">源内容粘贴</td></tr><tr><td style="text-align:left">Shift - Ctrl - V</td><td style="text-align:center">pasteContent</td><td style="text-align:center">智能粘贴</td></tr><tr><td style="text-align:left">Alt - F</td><td style="text-align:center">formatTables</td><td style="text-align:center">格式化表格</td></tr><tr><td style="text-align:left">Ctrl - N</td><td style="text-align:center"></td><td style="text-align:center">新建md文档</td></tr><tr><td style="text-align:left">Ctrl - H</td><td style="text-align:center"></td><td style="text-align:center">新建Hexo文档</td></tr><tr><td style="text-align:left">Ctrl - O</td><td style="text-align:center"></td><td style="text-align:center">打开md文件</td></tr><tr><td style="text-align:left">Ctrl - S</td><td style="text-align:center"></td><td style="text-align:center">保存文档</td></tr><tr><td style="text-align:left">Shift - Ctrl - S</td><td style="text-align:center"></td><td style="text-align:center">另存为</td></tr><tr><td style="text-align:left">Alt - Ctrl - S</td><td style="text-align:center"></td><td style="text-align:center">打开设置</td></tr><tr><td style="text-align:left">Ctrl - W</td><td style="text-align:center"></td><td style="text-align:center">切换写作模式</td></tr><tr><td style="text-align:left">Ctrl - P</td><td style="text-align:center"></td><td style="text-align:center">切换预览模式</td></tr><tr><td style="text-align:left">Ctrl - R</td><td style="text-align:center"></td><td style="text-align:center">切换阅读模式</td></tr></tbody></table><pre><code>提示: 在 Mac OS下, 请使用 Cmd 来代替 Ctrl .</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;‘Hexo’ 是一款基于 ‘Node.js’ 的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 ‘GitHub’ 和 ‘Co
      
    
    </summary>
    
      <category term="Hexo相关" scheme="YobeZhou.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="YobeZhou.github.io/tags/Hexo/"/>
    
      <category term="tools" scheme="YobeZhou.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>什么是Markdown？</title>
    <link href="YobeZhou.github.io/2019/03/30/%E4%BB%80%E4%B9%88%E6%98%AFMarkdown%EF%BC%9F/"/>
    <id>YobeZhou.github.io/2019/03/30/什么是Markdown？/</id>
    <published>2019-03-30T03:31:52.000Z</published>
    <updated>2019-04-01T02:56:36.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown的简单介绍"><a href="#Markdown的简单介绍" class="headerlink" title="Markdown的简单介绍"></a>Markdown的简单介绍</h1><p><a href="https://www.markdownguide.org/" target="_blank" rel="noopener">Markdown</a> 是由 ‘John Gruber’ 和 ‘Aaron Swartz’ 共同创建的一种轻量级纯文本格式语法。Markdown 可以让用户“以易读、易写的纯文本格式来进行写作，然后可以将其转换为有效格式的 XHTML（或 HTML）“。Markdown 语法只包含一些非常容易记住的符号。其学习曲线平缓；你可以在炒蘑菇的同时一点点学习 Markdown 语法（大约 10 分钟）。通过使用尽可能简单的语法，错误率达到了最小化。除了拥有友好的语法，它还具有直接输出干净、有效的（X）HTML 文件的强大功能。如果你看过我的 HTML 文件，你就会知道这个功能是多么的重要。</p><p>‘Markdown’ 格式语法的主要目标是实现最大的可读性。用户能够以纯文本的形式发布一份 ‘Markdown’ 格式的文件。用 ‘Markdown’ 进行文本写作的一个优点是易于在计算机、智能手机和个人之间共享。几乎所有的内容管理系统都支持 ‘Markdown’ 。它作为一种网络写作格式流行起来，其产生一些被许多服务采用的变种，比如 GitHub 和 Stack Exchange 。</p><p>我们可以使用任何文本编辑器来写 ‘Markdown’ 文件。但我建议使用一个专门为这种语法设计的编辑器。这篇文章中所讨论的软件允许你使用 ‘Markdown’ 语法来写各种格式的专业文档，包括博客文章、演示文稿、报告、电子邮件以及幻灯片等。另外，所有的应用都是在开源许可证下发布的，在 Linux、OS X 和 Windows 操作系统下均可用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown的简单介绍&quot;&gt;&lt;a href=&quot;#Markdown的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;Markdown的简单介绍&quot;&gt;&lt;/a&gt;Markdown的简单介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.markd
      
    
    </summary>
    
      <category term="Hexo相关" scheme="YobeZhou.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Markdown" scheme="YobeZhou.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用技巧</title>
    <link href="YobeZhou.github.io/2019/03/30/Hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>YobeZhou.github.io/2019/03/30/Hexo使用技巧/</id>
    <published>2019-03-30T03:06:08.000Z</published>
    <updated>2019-04-05T01:11:15.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近开始使用<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>写自己的个人博客，下面是对在使用过程中的一些技巧的总结。如果想要阅读官方的帮助文档请移步<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo帮助文档</a>。</p><h1 id="写作篇"><a href="#写作篇" class="headerlink" title="写作篇"></a>写作篇</h1><p>Hexo使用[markdown]语法的纯文本编辑，文件后缀名.m ,文件默认存放在我们的站点目录下“/source/_post”文件夹下。</p><h3 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>Hexo有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而我们自定义的其他布局和 post 相同，都将储存到 “source/_posts” 文件夹。可以在命令中指定文章的布局（layout），若不指定[layout]则布局将默认为 post，默认布局可以通过修改 _config.yml 中的 default_layout 参数来指定。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>部署前请确保网络连接，并且当前目录在hexo的根目录。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>在开始之前，必须先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br></pre></td></tr></table></figure></p><p>还可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- <span class="built_in">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">- <span class="built_in">type</span>: heroku</span><br><span class="line">  repo:</span><br></pre></td></tr></table></figure></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>或hexo素质三连<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo -g</span><br></pre></td></tr></table></figure></p><hr><h1 id="Hexo中添加本地图片和使用网络图片"><a href="#Hexo中添加本地图片和使用网络图片" class="headerlink" title="Hexo中添加本地图片和使用网络图片"></a>Hexo中添加本地图片和使用网络图片</h1><h2 id="方法一-相对引用"><a href="#方法一-相对引用" class="headerlink" title="方法一 相对引用"></a>方法一 相对引用</h2><p>由于首页和主页相对图片位置不一致，网站首页和内页很可能仅有一处能正常加载。<br>1.调整程序配置文件_config.yml 里的post_asset_folder:这个选项设置为True<br>2.在source下创建/images文件夹，先把图片xx.jpg/png复制到这个文件夹<br>3.最后在xxxx.md中想引入图片时，只需要在xxxx.md中按照markdown的格式引入图片：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Tip</span>](<span class="link">/images/xx.jpg</span>)</span><br></pre></td></tr></table></figure></p><h2 id="方法二-图床"><a href="#方法二-图床" class="headerlink" title="方法二 图床"></a>方法二 图床</h2><p>如SMMS图床无需注册<br>以下是测试：<br><figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://i.loli.net/2018/02/09/5a7d6a402e15e.jpg</span></span><br></pre></td></tr></table></figure></p><p>注：请备份Delete Link,必要时访问此链接删除图片。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近开始使用&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a
      
    
    </summary>
    
      <category term="Hexo相关" scheme="YobeZhou.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="YobeZhou.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="YobeZhou.github.io/2019/03/28/hello-world/"/>
    <id>YobeZhou.github.io/2019/03/28/hello-world/</id>
    <published>2019-03-28T12:31:54.527Z</published>
    <updated>2019-04-02T06:02:58.006Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
