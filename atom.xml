<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yobe</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="Yobe.github.io/"/>
  <updated>2019-03-31T13:15:24.874Z</updated>
  <id>Yobe.github.io/</id>
  
  <author>
    <name>周岳标</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内存的三种地址及其转换</title>
    <link href="Yobe.github.io/2019/03/31/%E5%86%85%E5%AD%98%E7%9A%84%E4%B8%89%E7%A7%8D%E5%9C%B0%E5%9D%80%E5%8F%8A%E5%85%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>Yobe.github.io/2019/03/31/内存的三种地址及其转换/</id>
    <published>2019-03-31T13:09:11.000Z</published>
    <updated>2019-03-31T13:15:24.874Z</updated>
    
    <content type="html"><![CDATA[<p>16进制的线性地址转化为地址的物理空间大小。<br>如：0x00000000  -  0x08000000的物理空间大小为128MB<br>    换算：0x08000000 === 134217728 (Bytes)<br>          134217728(Bytes) / 1024 = 131072(KB)<br>          131072(KB) / 1024 = 128(MB)  </p><h1 id="三种内存地址：逻辑地址、线性地址、和物理地址"><a href="#三种内存地址：逻辑地址、线性地址、和物理地址" class="headerlink" title="三种内存地址：逻辑地址、线性地址、和物理地址"></a>三种内存地址：逻辑地址、线性地址、和物理地址</h1><h2 id="逻辑地址"><a href="#逻辑地址" class="headerlink" title="逻辑地址"></a>逻辑地址</h2><p>包含在机器语言指令中用来指定一个操作数或一条指令的地址。这种寻址方式在80X86著名的分段结构中表现得尤为具体，它促使MS-DOS或Windows程序员把程序分成若干段。每一个逻辑地址都是有一个段和偏移量组成，偏移量指明了从段开始的地方到时间地址之间的距离。</p><h1 id="线性地址（虚拟地址）"><a href="#线性地址（虚拟地址）" class="headerlink" title="线性地址（虚拟地址）"></a>线性地址（虚拟地址）</h1><p>是一个32位无符号整数，可以用来表示高达4GB的地址，也就是高达4294967296个内存单元。线性地址通常用十六进制数字表示。</p><h1 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h1><p>用于内存芯片级内存单元寻址。它们与从微处理器的地址引脚发送到内存总线上的电信号相对应。物理地址由32位或36位无符号整数表示。</p><p>内存控制单元（MMU）通过一种称为分段单元的硬件电路把一个逻辑地址转换成线性地址</p><h1 id="分段单元"><a href="#分段单元" class="headerlink" title="分段单元"></a>分段单元</h1><ol><li>先检查段选择符的TI字段，已决定段描述符保存在哪一个描述符表中。TI字段指明描述符是在GDT中（在这种情况下，分段单元从gdtr寄存器中得到GDT的线性基地址）还是在激活的LDT中（在这种情况下，分段单元从ldtr寄存器中得到LDT的线性基地址）</li><li>从段选择符的index字段计算段描述符的地址，index字段的值乘以8，这个结果与gdtr或ldtr寄存器的内容相加</li><li>把逻辑地址的偏移量与段描述符base字段的值相加就得到了线性地址</li></ol><p>第二个称为分页单元的硬件电路把线性地址转化成一个物理地址。</p><h1 id="分段单元分页单元"><a href="#分段单元分页单元" class="headerlink" title="分段单元分页单元"></a>分段单元分页单元</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">逻辑地址 ----&gt; 线性地址 ----&gt; 物理地址</span><br></pre></td></tr></table></figure><p>实际上，分段和分页在某种程度上有点多余，因为它们都可以划分进程的物理地址空间：<br>分段可以给每一个进程分配不同的线性地址空间，而分页可以把同一线性地址空间映射到不同的物理空间，与分段相比，Linux更喜欢使用分页方式。<br>因为当所有进程使用相同的段寄存器值时，内存管理变得更简单，也就是说它们能共享同样的一组线性地址。<br>Linux设计目标之一是可以把它移植到绝大多数流行的处理器平台上。然而，RISC体系结构对分段的支持很有限。<br>在多处理系统中，所有与CPU都共享同一内存；这意味着RAM芯片可以由独立的CPU并发访问。<br>因为在RAM芯片上的读或写操作必须串行的执行。因此一种所谓内存仲裁器的硬件电路插在总线和每个RAM芯片之间，作用是如果某个RAM芯片空闲，就准予一个CPU访问，如果该芯片忙于为另一个处理器提出的请求服务，就延迟这个CPU的访问。<br>即使在单处理器上也使用内存仲裁器，因为单处理器系统中包含有一个叫做DMA控制器的特殊处理器，而DMA控制器与CPU并发操作。<br>在多处理器系统的情况下，因为仲裁器有多个输入端口，所以其结构更加复杂。<br>例如：双Pentium在每个芯片的入口维持一个两端口仲裁器，并在试图使用公用总线前请求两个CPU交换同步信息。</p><p>仲裁器由硬件电路管理，是隐藏的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;16进制的线性地址转化为地址的物理空间大小。&lt;br&gt;如：0x00000000  -  0x08000000的物理空间大小为128MB&lt;br&gt;    换算：0x08000000 === 134217728 (Bytes)&lt;br&gt;          134217728(Byte
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo提交搜索引擎收录（Google+Baidu）</title>
    <link href="Yobe.github.io/2019/03/31/Hexo%E6%8F%90%E4%BA%A4%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%94%B6%E5%BD%95%EF%BC%88Google-Baidu%EF%BC%89/"/>
    <id>Yobe.github.io/2019/03/31/Hexo提交搜索引擎收录（Google-Baidu）/</id>
    <published>2019-03-31T03:42:24.000Z</published>
    <updated>2019-03-31T03:42:24.811Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>递增与减运算符：++与--</title>
    <link href="Yobe.github.io/2019/03/31/%E9%80%92%E5%A2%9E%E4%B8%8E%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A++%E4%B8%8E--/"/>
    <id>Yobe.github.io/2019/03/31/递增与减运算符：++与--/</id>
    <published>2019-03-31T03:04:12.000Z</published>
    <updated>2019-03-31T03:12:14.942Z</updated>
    
    <content type="html"><![CDATA[<p>紧凑的代码让程序更为整洁，而且通常其生成的机器代码效率更高。</p><h1 id="递增与递减运算符"><a href="#递增与递减运算符" class="headerlink" title="递增与递减运算符"></a>递增与递减运算符</h1><p>递增运算符(increment operator)将其运算对象递增1；递减运算符(decrement operator)将其运算递减1，该运算符以两种方式出现(两种模式的区别在于递增&amp;递减行为发生的时间不同)：</p><pre><code>1. &quot;++&quot;出现在其作用的变量前面---前缀模式(++a)    如：q = 2*++a;        • 首先，a递增1；        • 然后，2乘以a，并将结果赋给q2. &quot;++&quot;出现在其作用的变量后面---后缀模式(a++)    如：q = 2*a++;        • 首先，2乘以a，并将结果赋给q；        • 然后，a递增1</code></pre><p>同理可得：</p><pre><code>&quot;--&quot;出现在其作用的变量前面 ----&gt; 前缀模式(--a)&quot;--&quot;出现在其作用的变量后面 ----&gt; 后缀模式(a--)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;紧凑的代码让程序更为整洁，而且通常其生成的机器代码效率更高。&lt;/p&gt;
&lt;h1 id=&quot;递增与递减运算符&quot;&gt;&lt;a href=&quot;#递增与递减运算符&quot; class=&quot;headerlink&quot; title=&quot;递增与递减运算符&quot;&gt;&lt;/a&gt;递增与递减运算符&lt;/h1&gt;&lt;p&gt;递增运算符(in
      
    
    </summary>
    
    
      <category term="C" scheme="Yobe.github.io/tags/C/"/>
    
      <category term="C/C++" scheme="Yobe.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客next主题添加Gitment评论系统</title>
    <link href="Yobe.github.io/2019/03/30/Hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>Yobe.github.io/2019/03/30/Hexo博客next主题添加Gitment评论系统/</id>
    <published>2019-03-30T14:12:49.000Z</published>
    <updated>2019-03-31T01:31:44.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo框架搭建好之后，默认的功能模块有限，因此很多模块需要我们自己去添加，对于我们的博客网站来说，没有评论系统怎么行呢？毕竟我们需要采集良言，及时发现文章的不足并且可以帮助仍有疑问的朋友解答问题。话不多说，我们开始搭建博客的评论系统吧。</p><h1 id="Gitment评论系统"><a href="#Gitment评论系统" class="headerlink" title="Gitment评论系统"></a>Gitment评论系统</h1><h2 id="Gitment简介"><a href="#Gitment简介" class="headerlink" title="Gitment简介"></a>Gitment简介</h2><p><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a> 是基于 GitHub Issues 的评论系统，是 imsun 利用 github 上的 issues 做的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown&amp;GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。想了解具体效果，可以点击查看官方Demo Page:<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment Demo</a>。</p><h2 id="注册OAuth-Application"><a href="#注册OAuth-Application" class="headerlink" title="注册OAuth Application"></a>注册OAuth Application</h2><p>首先我们先去 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">OAuth application</a> 进行注册，申请一个 Github OAuth Application。填写参考如下：</p><ol><li>Application name: 博客名字</li><li>Homepage URL: 网站主页地址(这里我填写的是域名或github项目地址/index.html大部分的默认网页都是index.html)</li><li>Application description: 描述，选填</li><li>Authorization callback URL: 填写域名或github项目地址</li></ol><p>填写相关信息时注意在 Authorization callback URL 一项填自己的网站url：<br><figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://username.github.io</span></span><br></pre></td></tr></table></figure></p><p>填写完毕后点击 Register application 若创建成功则将跳转到另外一个界面，此时我们会得到一个 client ID 和一个 client secret，它们将被用于之后的用户登录。</p><h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改 _config.yml"></a>修改 <strong>_config.yml</strong></h2><p>我们需要在 Hexo 主题目录下编辑修改 _config.yml 配置文件。不同的主题的配置文件存放路径有所差别，下面以 netx 主题为例说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next主题的配置文件路径：&quot;/themes/next/_config.yml&quot;</span><br></pre></td></tr></table></figure></p><p>打开配置文件后，我们搜索关键字“Gitment”将定位到配置位置。默认的配置内容为：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitment</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line"><span class="attr">  lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line"><span class="attr">  cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line"><span class="attr">  language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line"><span class="attr">  github_user:</span> <span class="comment"># MUST HAVE, Your Github ID</span></span><br><span class="line"><span class="attr">  github_repo:</span> <span class="comment"># MUST HAVE, The repo you use to store Gitment comments</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="comment"># MUST HAVE, Github client id for the Gitment</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="comment"># EITHER this or proxy_gateway, Github access secret token for the Gitment</span></span><br><span class="line"><span class="attr">  proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line"><span class="attr">  redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure></p><p>我们修改成自己的配置内容：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加Gitment评论系统</span></span><br><span class="line"><span class="comment"># Gitment</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr"> enable:</span> <span class="literal">true</span>                <span class="comment"># 修改为 true</span></span><br><span class="line"><span class="attr"> mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line"><span class="attr"> count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line"><span class="attr"> lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line"><span class="attr"> cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line"><span class="attr"> language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line"><span class="attr"> github_user:</span> <span class="number">123456</span>          <span class="comment"># 填写自己的 github ID</span></span><br><span class="line"><span class="attr"> github_repo:</span> <span class="comment"># MUST HAVE, The repo you use to store Gitment comments</span></span><br><span class="line"><span class="attr"> client_id:</span> <span class="string">abcd123456abcd</span>    <span class="comment"># 填写获取到的 client_id</span></span><br><span class="line"><span class="attr"> client_secret:</span> <span class="string">abcd123456efg</span> <span class="comment"># 填写获取到的 client_secret</span></span><br><span class="line"><span class="attr"> proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line"><span class="attr"> redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure></p><h2 id="获取自己的-Github-ID"><a href="#获取自己的-Github-ID" class="headerlink" title="获取自己的 Github ID"></a>获取自己的 Github ID</h2><p>在浏览器中打开下面的地址，”Your github username”需要修改为自己的Github username:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.github.com/users/"Your github username"</span><br></pre></td></tr></table></figure></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p> 在 Hexo 根目录输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>浏览器打开地址：<br><figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:4000/</span></span><br></pre></td></tr></table></figure></p><p>浏览自己的一篇博客到最后，如果发现有评论界面则大功告成！如果没有应该时配置信息没写对，请检查自己的配置内容。</p><div style="width: auto; margin: auto"><img src="/images/Gitment_test_interface.png" alt="Gitment_test_interface"></div><p>最后部署到我们的 Github 上:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Hexo框架搭建好之后，默认的功能模块有限，因此很多模块需要我们自己去添加，对于我们的博客网站来说，没有评论系统怎么行呢？毕竟我们需要采集良
      
    
    </summary>
    
      <category term="Hexo相关" scheme="Yobe.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="Yobe.github.io/tags/Hexo/"/>
    
      <category term="Gitment" scheme="Yobe.github.io/tags/Gitment/"/>
    
  </entry>
  
  <entry>
    <title>计算机术语-簇</title>
    <link href="Yobe.github.io/2019/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%AF%E8%AF%AD-%E7%B0%87/"/>
    <id>Yobe.github.io/2019/03/30/计算机术语-簇/</id>
    <published>2019-03-30T12:31:06.000Z</published>
    <updated>2019-03-30T15:29:48.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>  数据存储在硬盘的时候都是以簇为单位，所以无论文件大小是多少，除非正好是簇大小的倍数，否则文件所占用的最后一个簇或多或少都会产生一些剩余的空间，且这些空间又不能给其它文件使用，即使这个文件只有0字节，也不允许两个文件或两个以上的文件共用一个簇，不然会造成数据混乱。</p><table><thead><tr><th style="text-align:center">中文名</th><th style="text-align:center">簇</th></tr></thead><tbody><tr><td style="text-align:center">外文名</td><td style="text-align:center">CLUST</td></tr><tr><td style="text-align:center">存储管理</td><td style="text-align:center">最小单位</td></tr><tr><td style="text-align:center">属    性</td><td style="text-align:center">单位名称</td></tr><tr><td style="text-align:center">本    意</td><td style="text-align:center">“一群”、“一组”</td></tr><tr><td style="text-align:center">解    释</td><td style="text-align:center">一组扇区</td></tr></tbody></table><div style="width: auto; margin: auto"><img src="/images/磁盘上的磁道扇区和簇.jpg" alt></div><p>  微软操作系统（DOS、WINDOWS等）中磁盘文件存储管理的最小单位叫做“簇”<br>  一个文件通常存放在一个或多个簇里，但至少要单独占据一个“簇”。 也就是说两个文件不能存放在同一个簇中。<br>簇（CLUST）的本意就是“一群”、“一组”，即一组扇区(一个磁道可以分割成若干个大小相等的圆弧，叫扇区)的意思。因为扇区的单位太小，因此把它捆在一起，组成一个更大的单位更方便进行灵活管理。簇的大小通常是可以变化的，是由操作系统在所谓“（高级）格式化”时规定的，因此管理也更加灵活。<br>  通俗地讲文件就好比是一个家庭，数据就是人，即家庭成员；所谓簇就是一些单元套房；扇区是组成这些单元套房的一个个大小相等的房间。一个家庭可能住在一套或多套单元房子里，但一套房子不能同时住进两个家庭的成员。 文件系统是操作系统与驱动器之间的接口，当操作系统请求从硬盘里读取一个文件时，会请求相应的文件系统（FAT 16/FAT32/NTFS）打开文件。扇区是磁盘最小的物理存储单元，但由于操作系统无法对数目众多的扇区进行寻址，所以操作系统就将相邻的扇区组合在一起，形成一个簇，然后再对簇进行管理。每个簇可以包括2、4、8、16、32或64个扇区。显然，簇是操作系统所使用的逻辑概念，而非磁盘的物理特性。<br>  为了更好地管理磁盘空间和更高效地从硬盘读取数据，操作系统规定一个簇中只能放置一个文件的内容，因此文件所占用的空间，只能是簇的整数倍；如果文件实际大小小于一簇，它也要占一簇的空间。如果文件实际大小大于一簇，根据逻辑推算，那么该文件就要占两个簇的空间。所以，一般情况下文件所占空间要略大于文件的实际大小，只有在少数情况下，即文件的实际大小恰好是簇的整数倍时，文件的实际大小才会与所占空间完全一致。<br>  一个簇只能容纳一个文件占用，即使这个文件只有0字节，也决不允许两个文件或两个以上的文件共用一个簇，不然会造成数据混乱。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;  数据存储在硬盘的时候都是以簇为单位，所以无论文件大小是多少，除非正好是簇大小的倍数，否则文件所占用的最后一个簇或多或少都会产生一些剩余的
      
    
    </summary>
    
      <category term="操作系统" scheme="Yobe.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="Yobe.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hexo基本设置</title>
    <link href="Yobe.github.io/2019/03/30/Hexo%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"/>
    <id>Yobe.github.io/2019/03/30/Hexo基本设置/</id>
    <published>2019-03-30T05:40:16.000Z</published>
    <updated>2019-03-30T15:31:18.317Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Hexo相关" scheme="Yobe.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="Yobe.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>“Hexo+Github Page+个人域名”搭建个人专属博客</title>
    <link href="Yobe.github.io/2019/03/30/%E2%80%9CHexo+Giuthub_Page-%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E2%80%9D%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/"/>
    <id>Yobe.github.io/2019/03/30/“Hexo+Giuthub_Page-个人域名”搭建个人专属博客/</id>
    <published>2019-03-30T05:29:53.000Z</published>
    <updated>2019-03-30T15:32:22.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h1 id="Hexo部分"><a href="#Hexo部分" class="headerlink" title="Hexo部分"></a>Hexo部分</h1><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h1 id="Github部分"><a href="#Github部分" class="headerlink" title="Github部分"></a>Github部分</h1><h2 id="Github创建个人仓库"><a href="#Github创建个人仓库" class="headerlink" title="Github创建个人仓库"></a>Github创建个人仓库</h2><h2 id="生成SSH并添加"><a href="#生成SSH并添加" class="headerlink" title="生成SSH并添加"></a>生成SSH并添加</h2><h2 id="将Hexo部署到Github"><a href="#将Hexo部署到Github" class="headerlink" title="将Hexo部署到Github"></a>将Hexo部署到Github</h2><h1 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h1><h2 id="域名申请"><a href="#域名申请" class="headerlink" title="域名申请"></a>域名申请</h2><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><h2 id="博客域名升级Https"><a href="#博客域名升级Https" class="headerlink" title="博客域名升级Https"></a>博客域名升级Https</h2><p>Github 从 2009 年开始支持自定义域名，从 2016 年开始 *.github.io 域名支持 Https，从2018年5月14日 GitHub Pages 上的自定义域名也开始支持 Https。<br>Github 和 Let’s Encrypt 合作对建立在其上的自定义域名站点进行的证书颁发和认证。如果之前域名是做的 CNAME 或者 Alias 的 DNS 记录，则直接支持 Https 访问；如果是 A 记录做的解析，则需要更换 A 记录指向的 IP 地址为新的给定地址。最后在 Github Pages 仓库的设置页选中 “Enforce HTTPS” 选项即可。<br>配置过程非常简单，设置完稍等几分钟再次访问自己的主页将会发现已经升级成功！</p><p><img src="/images/UpgradTohttps.png" alt="成功升级为Https"></p><h1 id="后续学习"><a href="#后续学习" class="headerlink" title="后续学习"></a>后续学习</h1><p>本文中介绍完基于Hexo及Github page搭建专属的个人博客的详细方法。万事开头难，现在我们仅仅是把平台搭建好了，接下来我们应该趁热打铁继续深入学习探索，请参考我的其他文章：<br>[Hexo基本设置]<br>[hexo使用技巧]<br>[Hexo的专用编辑器-HexoEditor]<br>[什么是Markdown？]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;h1 id=&quot;Hexo部分&quot;&gt;&lt;a href=&quot;#Hexo部分&quot; class=&quot;headerlink&quot; title=&quot;Hexo部分&quot;&gt;&lt;/a&gt;H
      
    
    </summary>
    
      <category term="Hexo相关" scheme="Yobe.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="Yobe.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的专用编辑器-HexoEditor</title>
    <link href="Yobe.github.io/2019/03/30/Hexo%E7%9A%84%E4%B8%93%E7%94%A8%E7%BC%96%E8%BE%91%E5%99%A8-HexoEditor/"/>
    <id>Yobe.github.io/2019/03/30/Hexo的专用编辑器-HexoEditor/</id>
    <published>2019-03-30T03:41:40.000Z</published>
    <updated>2019-03-30T15:31:46.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>‘Hexo’ 是一款基于 ‘Node.js’ 的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 ‘GitHub’ 和 ‘Coding’ 上，是搭建博客的首选框架。 由于 ‘Hexo’ 使用[markdown]语法的纯文本编辑，所以在写作的时候我们需要使用一些工具方能达到事半功倍的效果。</p><h1 id="HexoEditor"><a href="#HexoEditor" class="headerlink" title="HexoEditor"></a>HexoEditor</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>接下来要介绍给大家的 ‘HexoEditor’ 便是网上有人针对 ‘Hexo’ 做了优化的 ‘Markdown’ 编辑器，其使用 [Electron] 做框架，修改自 [Moeditor] 支持 Markdown，Latex 等。使用它我们可以为 ‘Hexo’ 下的博客更好的去书写内容。这是<a href="https://github.com/zhuzhuyule/HexoEditor/" target="_blank" rel="noopener">HexoEditor</a>的开源项目地址。</p><h2 id="快速下载安装"><a href="#快速下载安装" class="headerlink" title="快速下载安装"></a>快速下载安装</h2><p>在 ‘Github’ 项目中并没有给出，可安装的 ‘releases’ 版本，如想省去麻烦的安装过程请在下面的地址下载。<br>下载地址：</p><p>Windows x64:</p><pre><code>https://github.com/zhuzhuyule/HexoEditor/releases/download/v1.5.30/HexoEditor_1.5.30_win_x64.exe</code></pre><p>Macx64:</p><pre><code>https://github.com/zhuzhuyule/HexoEditor/releases/download/v1.5.30/HexoEditor_1.5.30_mac_x64.dmg</code></pre><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><table><thead><tr><th style="text-align:left">按键</th><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:left">Tab</td><td style="text-align:center">tabAdd</td><td style="text-align:center">添加缩进</td></tr><tr><td style="text-align:left">Shift - Tab</td><td style="text-align:center">tabSubtract</td><td style="text-align:center">减少缩进</td></tr><tr><td style="text-align:left">Ctrl - B</td><td style="text-align:center">toggleBlod</td><td style="text-align:center">切换粗体</td></tr><tr><td style="text-align:left">Ctrl - I</td><td style="text-align:center">toggleItalic</td><td style="text-align:center">切换斜体</td></tr><tr><td style="text-align:left">Ctrl - D</td><td style="text-align:center">toggleDelete</td><td style="text-align:center">删除当前行</td></tr><tr><td style="text-align:left">Ctrl - `</td><td style="text-align:center">toggleComment</td><td style="text-align:center">切换注解</td></tr><tr><td style="text-align:left">Ctrl - L</td><td style="text-align:center">toggleUnOrderedList</td><td style="text-align:center">切换无序列表</td></tr><tr><td style="text-align:left">Ctrl - Alt - L</td><td style="text-align:center">toggleOrderedList</td><td style="text-align:center">切换有序列表</td></tr><tr><td style="text-align:left">Ctrl - ]</td><td style="text-align:center">toggleHeader</td><td style="text-align:center">降级标题</td></tr><tr><td style="text-align:left">Ctrl - [</td><td style="text-align:center">toggleUnHeader</td><td style="text-align:center">升级标题</td></tr><tr><td style="text-align:left">Ctrl - =</td><td style="text-align:center">toggleBlockquote</td><td style="text-align:center">增加引用</td></tr><tr><td style="text-align:left">Ctrl - -</td><td style="text-align:center">toggleUnBlockquote</td><td style="text-align:center">减少引用</td></tr><tr><td style="text-align:left">Ctrl - U</td><td style="text-align:center">drawLink</td><td style="text-align:center">添加超级链接</td></tr><tr><td style="text-align:left">Ctrl - Alt - U</td><td style="text-align:center">drawImageLink</td><td style="text-align:center">添加图片</td></tr><tr><td style="text-align:left">Ctrl - T</td><td style="text-align:center">drawTable(row col)</td><td style="text-align:center">添加表格(行 列)</td></tr><tr><td style="text-align:left">Ctrl - V</td><td style="text-align:center">pasteOriginContent</td><td style="text-align:center">源内容粘贴</td></tr><tr><td style="text-align:left">Shift - Ctrl - V</td><td style="text-align:center">pasteContent</td><td style="text-align:center">智能粘贴</td></tr><tr><td style="text-align:left">Alt - F</td><td style="text-align:center">formatTables</td><td style="text-align:center">格式化表格</td></tr><tr><td style="text-align:left">Ctrl - N</td><td style="text-align:center"></td><td style="text-align:center">新建md文档</td></tr><tr><td style="text-align:left">Ctrl - H</td><td style="text-align:center"></td><td style="text-align:center">新建Hexo文档</td></tr><tr><td style="text-align:left">Ctrl - O</td><td style="text-align:center"></td><td style="text-align:center">打开md文件</td></tr><tr><td style="text-align:left">Ctrl - S</td><td style="text-align:center"></td><td style="text-align:center">保存文档</td></tr><tr><td style="text-align:left">Shift - Ctrl - S</td><td style="text-align:center"></td><td style="text-align:center">另存为</td></tr><tr><td style="text-align:left">Alt - Ctrl - S</td><td style="text-align:center"></td><td style="text-align:center">打开设置</td></tr><tr><td style="text-align:left">Ctrl - W</td><td style="text-align:center"></td><td style="text-align:center">切换写作模式</td></tr><tr><td style="text-align:left">Ctrl - P</td><td style="text-align:center"></td><td style="text-align:center">切换预览模式</td></tr><tr><td style="text-align:left">Ctrl - R</td><td style="text-align:center"></td><td style="text-align:center">切换阅读模式</td></tr></tbody></table><pre><code>提示: 在 Mac OS下, 请使用 Cmd 来代替 Ctrl .</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;‘Hexo’ 是一款基于 ‘Node.js’ 的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 ‘GitHub’ 和 ‘Co
      
    
    </summary>
    
      <category term="Hexo相关" scheme="Yobe.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="Yobe.github.io/tags/Hexo/"/>
    
      <category term="tools" scheme="Yobe.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>什么是Markdown？</title>
    <link href="Yobe.github.io/2019/03/30/%E4%BB%80%E4%B9%88%E6%98%AFMarkdown%EF%BC%9F/"/>
    <id>Yobe.github.io/2019/03/30/什么是Markdown？/</id>
    <published>2019-03-30T03:31:52.000Z</published>
    <updated>2019-03-30T15:31:57.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown的简单介绍"><a href="#Markdown的简单介绍" class="headerlink" title="Markdown的简单介绍"></a>Markdown的简单介绍</h1><p>  <a href="https://www.markdownguide.org/" target="_blank" rel="noopener">Markdown</a> 是由 ‘John Gruber’ 和 ‘Aaron Swartz’ 共同创建的一种轻量级纯文本格式语法。Markdown 可以让用户“以易读、易写的纯文本格式来进行写作，然后可以将其转换为有效格式的 XHTML（或 HTML）“。Markdown 语法只包含一些非常容易记住的符号。其学习曲线平缓；你可以在炒蘑菇的同时一点点学习 Markdown 语法（大约 10 分钟）。通过使用尽可能简单的语法，错误率达到了最小化。除了拥有友好的语法，它还具有直接输出干净、有效的（X）HTML 文件的强大功能。如果你看过我的 HTML 文件，你就会知道这个功能是多么的重要。</p><p>  ‘Markdown’ 格式语法的主要目标是实现最大的可读性。用户能够以纯文本的形式发布一份 ‘Markdown’ 格式的文件。用 ‘Markdown’ 进行文本写作的一个优点是易于在计算机、智能手机和个人之间共享。几乎所有的内容管理系统都支持 ‘Markdown’ 。它作为一种网络写作格式流行起来，其产生一些被许多服务采用的变种，比如 GitHub 和 Stack Exchange 。</p><p>  我们可以使用任何文本编辑器来写 ‘Markdown’ 文件。但我建议使用一个专门为这种语法设计的编辑器。这篇文章中所讨论的软件允许你使用 ‘Markdown’ 语法来写各种格式的专业文档，包括博客文章、演示文稿、报告、电子邮件以及幻灯片等。另外，所有的应用都是在开源许可证下发布的，在 Linux、OS X 和 Windows 操作系统下均可用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown的简单介绍&quot;&gt;&lt;a href=&quot;#Markdown的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;Markdown的简单介绍&quot;&gt;&lt;/a&gt;Markdown的简单介绍&lt;/h1&gt;&lt;p&gt;  &lt;a href=&quot;https://www.mar
      
    
    </summary>
    
      <category term="Hexo相关" scheme="Yobe.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Markdown" scheme="Yobe.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用技巧</title>
    <link href="Yobe.github.io/2019/03/30/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>Yobe.github.io/2019/03/30/hexo使用技巧/</id>
    <published>2019-03-30T03:06:08.000Z</published>
    <updated>2019-03-30T15:32:17.466Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始使用<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>写自己的个人博客，下面是对在使用过程中的一些技巧的总结。如果想要阅读官方的帮助文档请移步<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo帮助文档</a>。</p><h1 id="写作篇"><a href="#写作篇" class="headerlink" title="写作篇"></a>写作篇</h1><p>Hexo使用[markdown]语法的纯文本编辑，文件后缀名.m ,文件默认存放在我们的站点目录下“/source/_post”文件夹下。</p><h3 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>Hexo有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而我们自定义的其他布局和 post 相同，都将储存到 “source/_posts” 文件夹。可以在命令中指定文章的布局（layout），若不指定[layout]则布局将默认为 post，默认布局可以通过修改 _config.yml 中的 default_layout 参数来指定。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>部署前请确保网络连接，并且当前目录在hexo的根目录。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>在开始之前，必须先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br></pre></td></tr></table></figure></p><p>还可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- <span class="built_in">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">- <span class="built_in">type</span>: heroku</span><br><span class="line">  repo:</span><br></pre></td></tr></table></figure></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>或hexo素质三连<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo -g</span><br></pre></td></tr></table></figure></p><hr><h1 id="Hexo中添加本地图片和使用网络图片"><a href="#Hexo中添加本地图片和使用网络图片" class="headerlink" title="Hexo中添加本地图片和使用网络图片"></a>Hexo中添加本地图片和使用网络图片</h1><h2 id="方法一-相对引用"><a href="#方法一-相对引用" class="headerlink" title="方法一 相对引用"></a>方法一 相对引用</h2><p>由于首页和主页相对图片位置不一致，网站首页和内页很可能仅有一处能正常加载。<br>1.调整程序配置文件_config.yml 里的post_asset_folder:这个选项设置为True<br>2.在source下创建/images文件夹，先把图片xx.jpg/png复制到这个文件夹<br>3.最后在xxxx.md中想引入图片时，只需要在xxxx.md中按照markdown的格式引入图片：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Tip</span>](<span class="link">/images/xx.jpg</span>)</span><br></pre></td></tr></table></figure></p><h2 id="方法二-图床"><a href="#方法二-图床" class="headerlink" title="方法二 图床"></a>方法二 图床</h2><p>如SMMS图床无需注册<br>以下是测试：<br><figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://i.loli.net/2018/02/09/5a7d6a402e15e.jpg</span></span><br></pre></td></tr></table></figure></p><p>注：请备份Delete Link,必要时访问此链接删除图片。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近开始使用&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;写自己的个人博客，下面是对在使用过程中的一些技巧的总结。如果想要阅读官方的帮助文档请移步&lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo相关" scheme="Yobe.github.io/categories/Hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="Yobe.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="Yobe.github.io/2019/03/28/hello-world/"/>
    <id>Yobe.github.io/2019/03/28/hello-world/</id>
    <published>2019-03-28T12:31:54.527Z</published>
    <updated>2019-03-28T12:31:54.527Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
